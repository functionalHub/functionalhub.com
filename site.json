{"title":"Clay","index":{"children":{"blog":{"title":"Blog","headTitle":"Functional programming blog and news","description":"Our blog about functional programming","keywords":"functional programming, blog, articles, news","weight":4,"content":" // Header nav //New init Why FP? In these days, it looks like functional programming is the new kid in town, something trendy and cool that you have to know. At least until the next cool thing arrives. But actually, functional programming is quite old. Probably older than you! Let's look back at the past, to the forefathers of computing, in order to understand the present, but also to be able to anticipate the future. Functional programming and imperative programming were born almost at the same time, at least the mathematical theories behing them. In the 30s, Alonzo Church defined Lambda Calculus, which is considered the theory behind functional programming. At the same time, Alan Turing defined his Turing Machine, which is in turn the theory that made imperative programming possible. It was a kind of clash of the titans. A perfect race to define the mathematical model to solve universal computability problems (what we call right now \"programs\"). In the 50s, the race moved to the practical implementations of those theories. John Backus, an IBM employee, created FORTRAN as one of the first \"high level\" imperative programming languages. In the same years, John McCarthy created Lisp in the MIT, as a practical implementation of Lambda Calculus theory. So we can say that FORTRAN is the great-grandfather of all imperative programming languages, while Lisp can be considered the same ancestor of all functional programming languages. But notice the context of both projects: in one hand, IBM wanted a language that solved a business problem, programmers productivity, while Lisp goals were quite different: solve complex computing problems, AI related mainly (yes, McCarthy is the father of the AI also) Both languages competed in the early days of the computer science. But the industry chose the winner quickly: computers (mainframes) where super expensive in those years, and people had to rent machine-time on demand (hello elastic cloud computing). Since the computing time was so expensive, it was critical to save the time wasted compiling and running wrong programs. And given that most of the code was written using punch cards or machine code, most of the programs contained several errors, so most of the computing time was wasted. And FORTRAN compiler were much faster than any other in those years, including the Lisp one. Backus created a super efficient compiler and most of the programmers started to move from machine code to FORTRAN, leaving Lisp (and functional programming) only for some specific problems related to symbolic computation and primitive AI research. But something happened in 1977: Backus received the Turing Award, (which is considered the Nobel prize in computing) for his work in high-level programming languages and FORTRAN. But to everyone's surprise, Backus' Turing Award lecture was focused on how functional programming is the right way to go, instead of using imperative programming and languages like FORTRAN. It was an apology for creating FORTRAN and making imperative programming the standard de-facto in those years. But it was already too late: most of the industry were already using imperative programming because it was more profitable than functional programming. First generations of programmers were shaped around imperative programming ideas, Unix and C were the way-to-go, next generations of programmers followed that trail... and the rest is history. And this is the way we've arrived to these days, where somehow we all developers are sons of C and grandsons of FORTRAN... without choosing it. But what is socking is that we're still using the same programming model for the last 50 years, even though today's hardware allows us to use better paradigms. Why are we stuck in the past? In these years, some programmers out there are wondering: Isn't it today the right time to revisit that \"old idea\" of functional programming? In a world where compilers take seconds to complete their task, and complexity in software is probably the main challenge nowadays, wouldn't be functional programming a feasible approach to achieve better concurrency, testeability and maintainability? So, now you know that if you've learnt C, Pascal or Java it wasn't by coincidence! //New end ","srcFilePath":"src/pages/blog.soy","id":"blog","location":"/blog.html","url":"/blog.html"},"testimonials":{"title":"Testimonials","headTitle":"Functional programming course recommendations","description":"Our students recommend our functional programming courses in Swift, Kotin, Javascript, Java or C#","keywords":"functional programming, testimonials, students, review, reviews, rating, ratings, score, like, recommendation","weight":3,"content":" // Header nav Testimonials // Testimonal Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, Mauricio Hern√°ndez Oyarz√°bal // Testimonal Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, Mauricio Hern√°ndez Oyarz√°bal ","srcFilePath":"src/pages/testimonials.soy","id":"testimonials","location":"/testimonials.html","url":"/testimonials.html"},"courses":{"children":{"functional_java":{"title":"Functional Java","headTitle":"Functional programming with Java course","description":"Learn functional programming in Java language for Android","keywords":"Java, functional programming, learn, course, training, android, java, jvm, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":0,"content":" // Header nav // Functional programming in Java Learn the main concepts of functional programming using Kotlin in a simple and practical way [üåΩ, üêÆ, üêî].map(cook) == [üçø, üçî, üç≥] Are you stuck in filter or map? Are you tired of reading that \"A monad is just a monoid in the category of endofunctors\"? Do you think that this functional programming thing is too abstract and academic for your taste? If you answered YES to any of those questions, then this is the couse you're looking for üòâ And if you still has some questions, maybe this can be helpful: Why should I learn Functional Programming? Well, let&#39;s say it will give you more tools to be a better programmer, no matter what programming language you use. Maybe you can&#39;t use FP in your daily basis (yeah, your boss is a dinosaur), but we&#39;re sure that if you learn these concepts, your programming style will improve A LOT. And why should I use Kotlin to learn Functional Programming? Kotlin is the cross-platform language of the future. Google already has official support to develop Android apps, but you can use it also for backend development, given that it&#39;s a first-class JVM language. Also, Kotlin is a friendly language for Java developers, since it&#39;s an easy, concise and pragmatic language, and it supports a lot of functional constructs! Because of that, Kotlin is the perfect language to be introduced in Functional Programming! But, are you sure this is really useful? Sure thing! Some benefits of programming with functional style: It will allow you to make some tasks that would be must harder using your traditional style. Notice that Google used some functional core concepts from the very begining. Your code will be cleaner, with (much) less variables, and you wouldn&#39;t worry by &quot;what if this is null&quot; Your code will be more robust, will much less errors. The compiler will detect much more errors for you following the functional style. Also, your coding style will allow you to detect errors faster and easier. Your code will be more maintainable and adaptable. As Joe Armstrong said, the inventor of Erlang, with OOP you wanted a banana but what you got was a gorilla holding the banana and the entire jungle. Is it going to be difficult? It&#39;s not difficult, it&#39;s quite simple. But it&#39;s different to the OOP style, that you&#39;re probably used to. Rich Hickey, the inventor of Clojure, explained in his famous talk &quot;Simple made Easy&quot; the difference between &quot;easy&quot; (something you&#39;re use to, even though it&#39;s a mess) and &quot;simple&quot; (something that can be explained and understood quickly, without effort, even though it may be quite new for you). Functional Programming is simple, but even you&#39;re an experienced developers, you&#39;ll have to learn scratch. But we&#39;re sure that this isn&#39;t anything for PhD&#39;s, as you probably believed. But you&#39;ll have to invest enough effort: no pain, no gain, my friend... How are you going to teach it? Using short video lessons, less than 20 minutes, where you&#39;ll find explanations about specific concepts and techniques. They&#39;re usually simple concepts, but with a lot of uses and potential applications. Don&#39;t worry if you don&#39;t get it at first. That&#39;s normal, and you&#39;ll probably have to listen some videos more than once, in order to understand all the details. Each video includes several practical and everyday examples. We won&#39;t talk about fibonacci, factorials and other mathematical examples. We&#39;ll use daily situations and challenges, but solved differently. And if next you want to jump into pure functional languages, it will be much easier for you. I don&#39;t know Kotlin, but I know how to code in X Awesome! Kotlin is just the vehicle, but the important thing is the payload. Our code is quite easy to read and we use the simplest features of the language. It&#39;s in fact a good way to be introduced in a new language from a different side: instead of focusing on the syntax, focusing on the style. And if you already know Java, then it will be even easier for you: this is the perfect excuse to learn Kotlin! Is there any other requirement? Not really: you need to know how to code in any language (better if it&#39;s an OOP language), and you need to be interested in learning Functional Programming. And it&#39;s even better if you already tried to learn FP without success. After this couse, you&#39;ll realize it wasn&#39;t that difficult Course details Week 1: Introduction ‚úåüèª ON AIR (96:11) As any great story, we need to start from the very begining. In order to warm engines, we'll see what functional programming is and what their basic principles are. And it's free... What are you waiting for? What is Functional Programming? (7:02) Mutable State Sucks (13:37) How to become stateless (16:37) Declarative Style (6:57) Functions without Side Effects (6:55) Lazy Evaluation (9:49) Type Systems (11:13) Recursion (3:37) Higher Order Functions (13:05) Functional Patterns (7:19) Week 2: Recursion COMING SOON In this week, you're already prepared to start going deeper. Since ages, recursion has been considered the ugly guy. Some (very) bad teachers encourage against it, saying that it's even worse than Comic Sans. In this week we're going to see that it's not as bad as some say, but it's one of the most powerful tools in programming in general (and in functional programming in particular). You need to learn some tricks to use it properly, and then you'll be ready to forget your loops forever... Recursion Recursive Functions Tail Recursion and Tail Call Optimization Week 3: Functions COMING SOON Functions are the cornerstone of functional programming. You already guessed it... In this week you'll learn new ways to deal with functions, not just to group code together, but to combine and compose several functions to create higher abstractions. You'll get the most from your functions Functions as First Class Citizens Lambdas Partial Applications and Currying Continuation Passing Style Functions Composition Creating expressions Play combine learn Week 4: Functional Transformations COMING SOON We're sure you already use map or reduce functions, but you're not so sure about how to use them properly or how they're implemented internally. Let's master these \"functional functions\" like nobody before Map Filter Fold FlatMap Zip, Foreach, Sort/ed Week 5-10: Functional Patterns COMING SOON Week 5: Functors There you go! After some weeks of functional programming exposure, we're ready to dive into the first weird concept. But don't worry, it's not as hard as it looks: you'll learn what a \"functor\" is and you'll realize that you've been using functors for some time without realizing it! Functor Option Collection Functor Result Functor Week 6: Monoids It wasn't so hard, was it? Now you're going to learn your second functional pattern: the monoid. For that, we're going to implement a small library for validations following all your brand-new knowledge... Monoids Use return values Combine AND validate Combine validatORs Semigroup Monoid is not an insult Week 7: Monads Finally! If you at some point have been scared about functional programming, chances are monads are the cause. After this week, you finally don't be scared anymore, and you'll learn how monads work, how to use them, and how to create your own ones! And most important, at the end you'll realize that \"monads are just monoids in the category of endofunctors\". It's true! What is a monad? Your Results are monads Week 8: Applicatives Now that you know what a monad is, let's go for other powerful functional pattern: the applicative. What is an Applicative? Applicative for Validation This is just a mess! Weeks 9 & 10: Mixing everything together After these 8 weeks, you've learnt a lot of new (and old) concepts. Some of them are so powerful that you'll need weeks (or even months) of practice to be proficient enough. So, in order to accelerate your learning, now we're going to use all those concepts together, in a new library to deal with asynchronous code: we're going to create the Future. Won't somebody please think of the asychronous code? Functor-ize the Future Monad-ize the Future Applicat-ize the Future Won't somebody please think of the sychronous code? Validations Operators of the Future Final Touches Suscribe! ","srcFilePath":"src/pages/courses/functional_java.soy","id":"functional_java","location":"/courses/functional_java.html","url":"/courses/functional_java.html"},"functional_kotlin":{"title":"Functional Kotlin","headTitle":"Functional programming with Kotlin course","description":"Learn functional programming in Kotlin language for Android","keywords":"kotlin, functional programming, learn, course, training, android, java, jvm, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":0,"content":" // Header nav // Functional programming in Kotlin Learn the main concepts of functional programming using Kotlin in a simple and practical way [üåΩ, üêÆ, üêî].map(cook) == [üçø, üçî, üç≥] Are you stuck in filter or map? Are you tired of reading that \"A monad is just a monoid in the category of endofunctors\"? Do you think that this functional programming thing is too abstract and academic for your taste? If you answered YES to any of those questions, then this is the couse you're looking for üòâ And if you still has some questions, maybe this can be helpful: Why should I learn Functional Programming? Well, let&#39;s say it will give you more tools to be a better programmer, no matter what programming language you use. Maybe you can&#39;t use FP in your daily basis (yeah, your boss is a dinosaur), but we&#39;re sure that if you learn these concepts, your programming style will improve A LOT. And why should I use Kotlin to learn Functional Programming? Kotlin is the cross-platform language of the future. Google already has official support to develop Android apps, but you can use it also for backend development, given that it&#39;s a first-class JVM language. Also, Kotlin is a friendly language for Kotlin developers, since it&#39;s an easy, concise and pragmatic language, and it supports a lot of functional constructs! Because of that, Kotlin is the perfect language to be introduced in Functional Programming! But, are you sure this is really useful? Sure thing! Some benefits of programming with functional style: It will allow you to make some tasks that would be must harder using your traditional style. Notice that Google used some functional core concepts from the very begining. Your code will be cleaner, with (much) less variables, and you wouldn&#39;t worry by &quot;what if this is null&quot; Your code will be more robust, will much less errors. The compiler will detect much more errors for you following the functional style. Also, your coding style will allow you to detect errors faster and easier. Your code will be more maintainable and adaptable. As Joe Armstrong said, the inventor of Erlang, with OOP you wanted a banana but what you got was a gorilla holding the banana and the entire jungle. Is it going to be difficult? It&#39;s not difficult, it&#39;s quite simple. But it&#39;s different to the OOP style, that you&#39;re probably used to. Rich Hickey, the inventor of Clojure, explained in his famous talk &quot;Simple made Easy&quot; the difference between &quot;easy&quot; (something you&#39;re use to, even though it&#39;s a mess) and &quot;simple&quot; (something that can be explained and understood quickly, without effort, even though it may be quite new for you). Functional Programming is simple, but even you&#39;re an experienced developers, you&#39;ll have to learn scratch. But we&#39;re sure that this isn&#39;t anything for PhD&#39;s, as you probably believed. But you&#39;ll have to invest enough effort: no pain, no gain, my friend... How are you going to teach it? Using short video lessons, less than 20 minutes, where you&#39;ll find explanations about specific concepts and techniques. They&#39;re usually simple concepts, but with a lot of uses and potential applications. Don&#39;t worry if you don&#39;t get it at first. That&#39;s normal, and you&#39;ll probably have to listen some videos more than once, in order to understand all the details. Each video includes several practical and everyday examples. We won&#39;t talk about fibonacci, factorials and other mathematical examples. We&#39;ll use daily situations and challenges, but solved differently. And if next you want to jump into pure functional languages, it will be much easier for you. I don&#39;t know Kotlin, but I know how to code in X Awesome! Kotlin is just the vehicle, but the important thing is the payload. Our code is quite easy to read and we use the simplest features of the language. It&#39;s in fact a good way to be introduced in a new language from a different side: instead of focusing on the syntax, focusing on the style. And if you already know Java, then it will be even easier for you: this is the perfect excuse to learn Kotlin! Is there any other requirement? Not really: you need to know how to code in any language (better if it&#39;s an OOP language), and you need to be interested in learning Functional Programming. And it&#39;s even better if you already tried to learn FP without success. After this couse, you&#39;ll realize it wasn&#39;t that difficult Course details Week 1: Introduction ‚úåüèª ON AIR (96:11) As any great story, we need to start from the very begining. In order to warm engines, we'll see what functional programming is and what their basic principles are. And it's free... What are you waiting for? What is Functional Programming? (7:02) Mutable State Sucks (13:37) How to become stateless (16:37) Declarative Style (6:57) Functions without Side Effects (6:55) Lazy Evaluation (9:49) Type Systems (11:13) Recursion (3:37) Higher Order Functions (13:05) Functional Patterns (7:19) Week 2: Recursion COMING SOON In this week, you're already prepared to start going deeper. Since ages, recursion has been considered the ugly guy. Some (very) bad teachers encourage against it, saying that it's even worse than Comic Sans. In this week we're going to see that it's not as bad as some say, but it's one of the most powerful tools in programming in general (and in functional programming in particular). You need to learn some tricks to use it properly, and then you'll be ready to forget your loops forever... Recursion Recursive Functions Tail Recursion and Tail Call Optimization Week 3: Functions COMING SOON Functions are the cornerstone of functional programming. You already guessed it... In this week you'll learn new ways to deal with functions, not just to group code together, but to combine and compose several functions to create higher abstractions. You'll get the most from your functions Functions as First Class Citizens Lambdas Partial Applications and Currying Continuation Passing Style Functions Composition Creating expressions Play combine learn Week 4: Functional Transformations COMING SOON We're sure you already use map or reduce functions, but you're not so sure about how to use them properly or how they're implemented internally. Let's master these \"functional functions\" like nobody before Map Filter Fold FlatMap Zip, Foreach, Sort/ed Week 5-10: Functional Patterns COMING SOON Week 5: Functors There you go! After some weeks of functional programming exposure, we're ready to dive into the first weird concept. But don't worry, it's not as hard as it looks: you'll learn what a \"functor\" is and you'll realize that you've been using functors for some time without realizing it! Functor Option Collection Functor Result Functor Week 6: Monoids It wasn't so hard, was it? Now you're going to learn your second functional pattern: the monoid. For that, we're going to implement a small library for validations following all your brand-new knowledge... Monoids Use return values Combine AND validate Combine validatORs Semigroup Monoid is not an insult Week 7: Monads Finally! If you at some point have been scared about functional programming, chances are monads are the cause. After this week, you finally don't be scared anymore, and you'll learn how monads work, how to use them, and how to create your own ones! And most important, at the end you'll realize that \"monads are just monoids in the category of endofunctors\". It's true! What is a monad? Your Results are monads Week 8: Applicatives Now that you know what a monad is, let's go for other powerful functional pattern: the applicative. What is an Applicative? Applicative for Validation This is just a mess! Weeks 9 & 10: Mixing everything together After these 8 weeks, you've learnt a lot of new (and old) concepts. Some of them are so powerful that you'll need weeks (or even months) of practice to be proficient enough. So, in order to accelerate your learning, now we're going to use all those concepts together, in a new library to deal with asynchronous code: we're going to create the Future. Won't somebody please think of the asychronous code? Functor-ize the Future Monad-ize the Future Applicat-ize the Future Won't somebody please think of the sychronous code? Validations Operators of the Future Final Touches Un curso de: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam Buy the course See all courses ","srcFilePath":"src/pages/courses/functional_kotlin.soy","id":"functional_kotlin","location":"/courses/functional_kotlin.html","url":"/courses/functional_kotlin.html"}},"title":"Courses","headTitle":"Functional programming courses and training","description":"Learn functional programming with our courses in your own language","keywords":"functional programming, learn, course, training, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":2,"content":" // Header nav //New init Functional Programming for Mobile Developers Swift and Kotlin are the lastest programming languages for mobile development. You know what? Both include functional constructs by default, allowing you to code in a functional style. Are you going to get stuck with filter, map and reduce? FUNCTIONAL SWIFT Functional Swift Learn functional programming in Swift in a practical way, with examples used in everyday iOS apps. Go to the course FUNCTIONAL KOTLIN Functional Kotlin Learn functional programming in Kotlin in a practical way, with examples used in everyday Android apps. Go to the course //New end //New init Functional Programming for Frontenders Javascript is THE language for the frontend development. But... Did you know that Mocha (then called LiveScript, JavaScript and now ECMAScript) was created to be the \"Scheme in the browser\"? Since Scheme is a dialect of Lisp, functional programming and Javascript has much more in common than what you would think. FUNCTIONAL JavaScript Functional JavaScript With Javascript you can learn functional programming in a practical way: familiar syntax, useful day-to-day examples and out-of-the-box functional constructions make it the perfect language to learn functional programming! Go to the course //New end //New init Functional Programming for Backend Developers The server-side is the natural field for functional programming. With it you'll get better concurrency, which is critical for a server system. However, you don't need to change your stack to Scala or other functional language to enjoy the benefits of functional programming. Using your language you'll be able to improve dramatically how you write code. FUNCTIONAL C# Functional C# Erik Meijer, one of the architects behind C# and LINQ is one of the most strong supporters of functional programming. Because of that, C# has introduced more and more functional constructs with each version. And if you want to go one step further, you always can jump info F# Go to the course FUNCTIONAL JAVA Functional Java Even though Java can't be considered a functional language, you can be introduced to most of the concepts thanks to lambdas and functional interfaces support in Java 8. Don't yearn a new project using Scala. You can start to learn functional programming with Java NOW. Go to the course //New end ","srcFilePath":"src/pages/courses/index.soy","id":"courses","location":"/courses/","url":"/courses/","childIds":["functional_java","functional_kotlin"]}},"title":"Home","headTitle":"Learn functional programming with our courses in Swift, Kotlin, Javascript, C#, Java","description":"functionalHub is the play to learn functional programming with our courses in your language, in a practica way: Swift, Kotlin, Javascript, C#, Java","keywords":"functional programming, learn, course, training, swift, kotlin, javascript, java, c#","content":" ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","childIds":["courses","testimonials","blog"]}}