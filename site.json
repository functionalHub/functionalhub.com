{"title":"Clay","index":{"children":{"blog":{"title":"Blog","headTitle":"Functional programming blog and news","description":"Our blog about functional programming","keywords":"functional programming, blog, articles, news","weight":4,"content":" // Header nav //New init Only learn FP by: Jose Manuel 13/05/2017 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum condimentum eros ante, nec sagittis arcu venenatis eget. Donec at sollicitudin leo. Phasellus egestas metus eu urna euismod, non iaculis neque auctor. Vivamus congue convallis arcu, at dapibus quam. Nulla facilisi. Aliquam varius rhoncus odio quis cursus. Nunc placerat, nulla id sodales ornare, risus ligula tempor urna, consequat tincidunt eros libero sed diam. Aliquam tempor orci dignissim malesuada aliquam. Praesent elit turpis, tincidunt sed justo vel, dapibus feugiat risus. Nullam lobortis purus sed volutpat facilisis. Nulla at neque nec purus maximus iaculis non sit amet magna. Fusce pulvinar placerat volutpat. Vivamus ac nisi velit. Cras sodales dolor ut euismod vulputate. Sed tempus justo dui, quis rhoncus mi sagittis quis. Phasellus sem nibh, euismod eget felis id, tincidunt viverra ligula. In euismod elementum porttitor. Aenean ut sodales tellus. Nulla facilisi. Donec porttitor eros nec nisl iaculis, in sodales nisl pellentesque. Mauris non ullamcorper ipsum, sit amet placerat enim. Suspendisse tristique vel sem at tincidunt Curabitur quis faucibus augue, consequat venenatis lacus. Aliquam et arcu vitae nisi dictum rhoncus quis nec orci. Cras libero eros, lobortis id orci eu, commodo egestas nisi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget felis libero. Sed placerat orci vel maximus accumsan. Vestibulum sagittis dui non facilisis lacinia. Etiam fringilla sollicitudin nisl vitae lobortis. Nullam sed eros justo. Donec sit amet convallis libero. Aliquam ac sapien sed nisl tincidunt dignissim eget et mi. Praesent ut iaculis est. Suspendisse blandit tempus hendrerit. Phasellus commodo, dolor at finibus commodo, massa elit maximus tellus, eu iaculis lectus est ut magna. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer bibendum ut nibh vitae venenatis. Cras ac felis nec metus accumsan congue et nec nulla. In hac habitasse platea dictumst. Aenean leo nulla, luctus eget mattis quis, tempor ac urna. Quisque enim elit, mattis quis suscipit quis, mollis nec sem. Sed sit amet ex a ex eleifend varius. Fusce dignissim urna sed odio malesuada lacinia et ac ligula. Quisque diam nibh, mollis efficitur cursus ut, ultricies ut metus. Nulla nec egestas neque. In vel odio urna. In eu sollicitudin ante. Sed dictum mollis felis ut porta. Nullam id velit egestas, molestie lacus vitae, elementum ante. Suspendisse ut ligula dolor. In rutrum tortor risus, sed hendrerit odio tincidunt at. Sed sollicitudin quam malesuada, venenatis ipsum sed, tristique lectus. Cras eu tincidunt turpis. Aenean ac nisi sed nulla tincidunt consectetur. In laoreet felis nec velit euismod, at tincidunt felis mollis. //New end ","srcFilePath":"src/pages/blog.soy","id":"blog","location":"/blog.html","url":"/blog.html"},"testimonials":{"title":"Testimonials","headTitle":"Functional programming course recommendations","description":"Our students recommend our functional programming courses in Swift, Kotin, Javascript, Java or C#","keywords":"functional programming, testimonials, students, review, reviews, rating, ratings, score, like, recommendation","weight":3,"content":" // Header nav //New init Testimonials //New end ","srcFilePath":"src/pages/testimonials.soy","id":"testimonials","location":"/testimonials.html","url":"/testimonials.html"},"whyfp":{"title":"Why FP?","headTitle":"Why is functional programming important for your future?","description":"Why is functional programming important for your future?","keywords":"functional programming, future, career, trend, trendy","weight":1,"content":" // Header nav //New init Why FP? Hola de nuevo! üëãüèª Aunque as√≠ lo parezca, me temo que la programaci√≥n no tiene nada de moda üíÖüèº, y mucho menos de \"nueva\"... en realidad la programaci√≥n funcional es muy vieja. Mucho m√°s que t√∫. Hoy vamos a mirar al pasado, a los pioneros de la inform√°tica, para entender el presente, y sobre todo, para ser capaces de anticiparnos al futuro. üîÆ La programaci√≥n funcional y la programaci√≥n imperativa nacieron al mismo tiempo, al menos a nivel te√≥rico, all√° por los a√±os 30. Mientras Alonzo Church defin√≠a su C√°lculo Lambda ∆õ, que es la base te√≥rica de la programaci√≥n funcional, Alan Turing hac√≠a lo propio con su M√°quina de Turing üé∞, que es a su vez la teor√≠a matem√°tica sobre la que se basa la programaci√≥n imperativa. Era un duelo de titanes, para ver quien defin√≠a el modelo te√≥rico (a nivel matem√°tico) que mejor pudiese resolver problemas computables universales (vamos, programas). Ya en los a√±os 50, la carrera se movi√≥ al plano m√°s pr√°ctico. John Backus, un trabajador de IBM, cre√≥ FORTRAN como implementaci√≥n real de ese modelo te√≥rico de computaci√≥n imperativa que defini√≥ Turing. M√°s o menos al mismo tiempo, en el MIT de Boston, John McCarthy hizo algo parecido creando Lisp, pero basado en el C√°lculo Lambda de Church. Otra vez la batalla estaba servida. Podr√≠amos decir que FORTRAN es el tatarabuelo de todos los lenguajes de programaci√≥n imperativos, y Lisp ocupa un lugar parecido para todos los lenguajes funcionales. Es importante fijarse el contexto donde nacen ambos proyectos: por un lado IBM, que como empresa pura y dura, busca soluciones econ√≥micamente viables a problemas de sus clientes. Y por otro lado el MIT, que es el laboratorio donde se conciben las ideas m√°s revolucionarias y futuristas del mundo. Esto es importante tenerlo en cuenta ü§î Durante a√±os, ambos lenguajes compitieron por liderar la incipiente industria de la inform√°tica. Sin embargo, un \"peque√±o detalle\" hizo inclinar la balanza: las m√°quinas eran car√≠simas en aquellos a√±os, as√≠ que se programaba con papel y boli, y luego se alquilaban una m√°quina por horas (cloud computing?) para que alguien, normalmente una se√±orita (s√≠ amigos, las mujeres fueron las primeras programadoras üë©üèª‚Äçüíª), introdujese el programa en el ordenador, lo compilase y lo ejecutase, imprimiendo el resultado con una impresora matricial üñ® Lo que inclin√≥ la balanza fue que un programa escrito en FORTRAN (con estilo imperativo), se compilaba y ejecutaba infinitamente m√°s r√°pido que el mismo programa escrito en Lisp (con estilo funcional). Backus hab√≠a hecho un compilador muy eficiente para la √©poca, ya que a IBM le preocupaba, y mucho, el aspecto econ√≥mico üí∏ Ponte en su lugar: si tu programa en estilo imperativo tarda minutos en compilarse, pero el mismo programa en estilo funcional tarda horas o hasta d√≠as, y tienes que pagar por ese tiempo de procesamiento, t√∫ tambi√©n dejar√≠as de lado el estilo funcional ¬øverdad? ü§ë As√≠ que en los siguientes a√±os, Lisp se fue dejando como la herramienta para resolver problemas especialmente complejos (como la inteligencia artificial), donde la rentabilidad econ√≥mica no era tan importante como conseguir una soluci√≥n a tu problema. Y llegamos al a√±o 1977, donde Backus recibi√≥ el premio Turing (el Nobel de los inform√°ticos) por su trabajo en el √°rea de compiladores. Realmente el compilador de FORTRAN era muy bueno y avanzado. Pero para sorpresa de todos, en su discurso de la entrega del premio, en vez de sacar pecho, lo que hizo fue criticar duramente a los lenguajes imperativos y present√≥ a los lenguajes funcionales como la alternativa correcta. ¬°Estaba entonando un mea-culpa, tirando por tierra su propia creaci√≥n, por la que le estaban dando su premio m√°s importante! üòµ Pero ya era tarde: la industria ya hab√≠a elegido el camino m√°s rentable y pragm√°tico, las primeras generaciones de programadores se hab√≠an forjado en el modelo imperativo (recuerda, el √∫nico viable para el hardware de la √©poca), Unix y sus heroes, marcaron la pauta a partir de aquellos a√±os, C se volvi√≥ el lenguaje de referencia... y el resto ya es historia. Y as√≠ hemos llegado hasta el d√≠a de hoy, donde, en cierta manera, todos los desarrolladores actuales somos hijos de C y nietos de FORTRAN, pero sin haberlo elegido. Lo que resulta llamativo es que ya no tenemos esas restricciones de hardware, pero seguimos utilizando un modelo de programaci√≥n propio de los a√±os 50. Es duro decirlo, pero es as√≠. üèö Y desde hace unos cuantos a√±os, muchos programadores se est√°n haciendo la misma pregunta... ¬øno es el momento ya de retomar esa ‚Äúvieja idea‚Äù de la programaci√≥n funcional? Todos sabemos lo inmanejables que se vuelven los proyectos de software cuando crecen... y eso no deber√≠a ser as√≠. La programaci√≥n funcional aporta muchas ventajas a la hora de resolver problemas muy actuales, como el crecimiento y mantenimiento del software, o la ejecuci√≥n de c√≥digo as√≠ncrono, en paralelo o de forma concurrente, y nuestro hardware es capaz de compilar en segundos cualquier programa en estilo funcional üèÉ As√≠ que ahora ya sabes por qu√© aprendiste a programar en C, Pascal o Java, no fue por casualidad‚Ä¶ ma√±ana te contar√© m√°s sobre lo que te est√°s perdiendo por no usar programaci√≥n funcional. Y recuerda ¬°el viernes un regalo para t√≠! üéÅ //New end ","srcFilePath":"src/pages/whyfp.soy","id":"whyfp","location":"/whyfp.html","url":"/whyfp.html"},"courses":{"children":{"functional_java":{"title":"Functional Java","headTitle":"Functional programming with Java course","description":"Learn functional programming in Java language for Android","keywords":"Java, functional programming, learn, course, training, android, java, jvm, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":0,"content":" // Header nav // Functional programming in Java Learn the main concepts of functional programming using Kotlin in a simple and practical way [üåΩ, üêÆ, üêî].map(cook) == [üçø, üçî, üç≥] Are you stuck in filter or map? Are you tired of reading that \"A monad is just a monoid in the category of endofunctors\"? Do you think that this functional programming thing is too abstract and academic for your taste? If you answered YES to any of those questions, then this is the couse you're looking for üòâ And if you still has some questions, maybe this can be helpful: Why should I learn Functional Programming? Well, let&#39;s say it will give you more tools to be a better programmer, no matter what programming language you use. Maybe you can&#39;t use FP in your daily basis (yeah, your boss is a dinosaur), but we&#39;re sure that if you learn these concepts, your programming style will improve A LOT. And why should I use Kotlin to learn Functional Programming? Kotlin is the cross-platform language of the future. Google already has official support to develop Android apps, but you can use it also for backend development, given that it&#39;s a first-class JVM language. Also, Kotlin is a friendly language for Java developers, since it&#39;s an easy, concise and pragmatic language, and it supports a lot of functional constructs! Because of that, Kotlin is the perfect language to be introduced in Functional Programming! But, are you sure this is really useful? Sure thing! Some benefits of programming with functional style: It will allow you to make some tasks that would be must harder using your traditional style. Notice that Google used some functional core concepts from the very begining. Your code will be cleaner, with (much) less variables, and you wouldn&#39;t worry by &quot;what if this is null&quot; Your code will be more robust, will much less errors. The compiler will detect much more errors for you following the functional style. Also, your coding style will allow you to detect errors faster and easier. Your code will be more maintainable and adaptable. As Joe Armstrong said, the inventor of Erlang, with OOP you wanted a banana but what you got was a gorilla holding the banana and the entire jungle. Is it going to be difficult? It&#39;s not difficult, it&#39;s quite simple. But it&#39;s different to the OOP style, that you&#39;re probably used to. Rich Hickey, the inventor of Clojure, explained in his famous talk &quot;Simple made Easy&quot; the difference between &quot;easy&quot; (something you&#39;re use to, even though it&#39;s a mess) and &quot;simple&quot; (something that can be explained and understood quickly, without effort, even though it may be quite new for you). Functional Programming is simple, but even you&#39;re an experienced developers, you&#39;ll have to learn scratch. But we&#39;re sure that this isn&#39;t anything for PhD&#39;s, as you probably believed. But you&#39;ll have to invest enough effort: no pain, no gain, my friend... How are you going to teach it? Using short video lessons, less than 20 minutes, where you&#39;ll find explanations about specific concepts and techniques. They&#39;re usually simple concepts, but with a lot of uses and potential applications. Don&#39;t worry if you don&#39;t get it at first. That&#39;s normal, and you&#39;ll probably have to listen some videos more than once, in order to understand all the details. Each video includes several practical and everyday examples. We won&#39;t talk about fibonacci, factorials and other mathematical examples. We&#39;ll use daily situations and challenges, but solved differently. And if next you want to jump into pure functional languages, it will be much easier for you. I don&#39;t know Kotlin, but I know how to code in X Awesome! Kotlin is just the vehicle, but the important thing is the payload. Our code is quite easy to read and we use the simplest features of the language. It&#39;s in fact a good way to be introduced in a new language from a different side: instead of focusing on the syntax, focusing on the style. And if you already know Java, then it will be even easier for you: this is the perfect excuse to learn Kotlin! Is there any other requirement? Not really: you need to know how to code in any language (better if it&#39;s an OOP language), and you need to be interested in learning Functional Programming. And it&#39;s even better if you already tried to learn FP without success. After this couse, you&#39;ll realize it wasn&#39;t that difficult Course details Week 1: Introduction ‚úåüèª ON AIR (96:11) As any great story, we need to start from the very begining. In order to warm engines, we'll see what functional programming is and what their basic principles are. And it's free... What are you waiting for? What is Functional Programming? (7:02) Mutable State Sucks (13:37) How to become stateless (16:37) Declarative Style (6:57) Functions without Side Effects (6:55) Lazy Evaluation (9:49) Type Systems (11:13) Recursion (3:37) Higher Order Functions (13:05) Functional Patterns (7:19) Week 2: Recursion COMING SOON In this week, you're already prepared to start going deeper. Since ages, recursion has been considered the ugly guy. Some (very) bad teachers encourage against it, saying that it's even worse than Comic Sans. In this week we're going to see that it's not as bad as some say, but it's one of the most powerful tools in programming in general (and in functional programming in particular). You need to learn some tricks to use it properly, and then you'll be ready to forget your loops forever... Recursion Recursive Functions Tail Recursion and Tail Call Optimization Week 3: Functions COMING SOON Functions are the cornerstone of functional programming. You already guessed it... In this week you'll learn new ways to deal with functions, not just to group code together, but to combine and compose several functions to create higher abstractions. You'll get the most from your functions Functions as First Class Citizens Lambdas Partial Applications and Currying Continuation Passing Style Functions Composition Creating expressions Play combine learn Week 4: Functional Transformations COMING SOON We're sure you already use map or reduce functions, but you're not so sure about how to use them properly or how they're implemented internally. Let's master these \"functional functions\" like nobody before Map Filter Fold FlatMap Zip, Foreach, Sort/ed Week 5-10: Functional Patterns COMING SOON Week 5: Functors There you go! After some weeks of functional programming exposure, we're ready to dive into the first weird concept. But don't worry, it's not as hard as it looks: you'll learn what a \"functor\" is and you'll realize that you've been using functors for some time without realizing it! Functor Option Collection Functor Result Functor Week 6: Monoids It wasn't so hard, was it? Now you're going to learn your second functional pattern: the monoid. For that, we're going to implement a small library for validations following all your brand-new knowledge... Monoids Use return values Combine AND validate Combine validatORs Semigroup Monoid is not an insult Week 7: Monads Finally! If you at some point have been scared about functional programming, chances are monads are the cause. After this week, you finally don't be scared anymore, and you'll learn how monads work, how to use them, and how to create your own ones! And most important, at the end you'll realize that \"monads are just monoids in the category of endofunctors\". It's true! What is a monad? Your Results are monads Week 8: Applicatives Now that you know what a monad is, let's go for other powerful functional pattern: the applicative. What is an Applicative? Applicative for Validation This is just a mess! Weeks 9 & 10: Mixing everything together After these 8 weeks, you've learnt a lot of new (and old) concepts. Some of them are so powerful that you'll need weeks (or even months) of practice to be proficient enough. So, in order to accelerate your learning, now we're going to use all those concepts together, in a new library to deal with asynchronous code: we're going to create the Future. Won't somebody please think of the asychronous code? Functor-ize the Future Monad-ize the Future Applicat-ize the Future Won't somebody please think of the sychronous code? Validations Operators of the Future Final Touches Un curso de: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam Buy the course See all courses ","srcFilePath":"src/pages/courses/functional_java.soy","id":"functional_java","location":"/courses/functional_java.html","url":"/courses/functional_java.html"},"functional_kotlin":{"title":"Functional Kotlin","headTitle":"Functional programming with Kotlin course","description":"Learn functional programming in Kotlin language for Android","keywords":"kotlin, functional programming, learn, course, training, android, java, jvm, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":0,"content":" // Header nav // Functional programming in Kotlin Learn the main concepts of functional programming using Kotlin in a simple and practical way [üåΩ, üêÆ, üêî].map(cook) == [üçø, üçî, üç≥] Are you stuck in filter or map? Are you tired of reading that \"A monad is just a monoid in the category of endofunctors\"? Do you think that this functional programming thing is too abstract and academic for your taste? If you answered YES to any of those questions, then this is the couse you're looking for üòâ And if you still has some questions, maybe this can be helpful: Why should I learn Functional Programming? Well, let&#39;s say it will give you more tools to be a better programmer, no matter what programming language you use. Maybe you can&#39;t use FP in your daily basis (yeah, your boss is a dinosaur), but we&#39;re sure that if you learn these concepts, your programming style will improve A LOT. And why should I use Kotlin to learn Functional Programming? Kotlin is the cross-platform language of the future. Google already has official support to develop Android apps, but you can use it also for backend development, given that it&#39;s a first-class JVM language. Also, Kotlin is a friendly language for Java developers, since it&#39;s an easy, concise and pragmatic language, and it supports a lot of functional constructs! Because of that, Kotlin is the perfect language to be introduced in Functional Programming! But, are you sure this is really useful? Sure thing! Some benefits of programming with functional style: It will allow you to make some tasks that would be must harder using your traditional style. Notice that Google used some functional core concepts from the very begining. Your code will be cleaner, with (much) less variables, and you wouldn&#39;t worry by &quot;what if this is null&quot; Your code will be more robust, will much less errors. The compiler will detect much more errors for you following the functional style. Also, your coding style will allow you to detect errors faster and easier. Your code will be more maintainable and adaptable. As Joe Armstrong said, the inventor of Erlang, with OOP you wanted a banana but what you got was a gorilla holding the banana and the entire jungle. Is it going to be difficult? It&#39;s not difficult, it&#39;s quite simple. But it&#39;s different to the OOP style, that you&#39;re probably used to. Rich Hickey, the inventor of Clojure, explained in his famous talk &quot;Simple made Easy&quot; the difference between &quot;easy&quot; (something you&#39;re use to, even though it&#39;s a mess) and &quot;simple&quot; (something that can be explained and understood quickly, without effort, even though it may be quite new for you). Functional Programming is simple, but even you&#39;re an experienced developers, you&#39;ll have to learn scratch. But we&#39;re sure that this isn&#39;t anything for PhD&#39;s, as you probably believed. But you&#39;ll have to invest enough effort: no pain, no gain, my friend... How are you going to teach it? Using short video lessons, less than 20 minutes, where you&#39;ll find explanations about specific concepts and techniques. They&#39;re usually simple concepts, but with a lot of uses and potential applications. Don&#39;t worry if you don&#39;t get it at first. That&#39;s normal, and you&#39;ll probably have to listen some videos more than once, in order to understand all the details. Each video includes several practical and everyday examples. We won&#39;t talk about fibonacci, factorials and other mathematical examples. We&#39;ll use daily situations and challenges, but solved differently. And if next you want to jump into pure functional languages, it will be much easier for you. I don&#39;t know Kotlin, but I know how to code in X Awesome! Kotlin is just the vehicle, but the important thing is the payload. Our code is quite easy to read and we use the simplest features of the language. It&#39;s in fact a good way to be introduced in a new language from a different side: instead of focusing on the syntax, focusing on the style. And if you already know Java, then it will be even easier for you: this is the perfect excuse to learn Kotlin! Is there any other requirement? Not really: you need to know how to code in any language (better if it&#39;s an OOP language), and you need to be interested in learning Functional Programming. And it&#39;s even better if you already tried to learn FP without success. After this couse, you&#39;ll realize it wasn&#39;t that difficult Course details Week 1: Introduction ‚úåüèª ON AIR (96:11) As any great story, we need to start from the very begining. In order to warm engines, we'll see what functional programming is and what their basic principles are. And it's free... What are you waiting for? What is Functional Programming? (7:02) Mutable State Sucks (13:37) How to become stateless (16:37) Declarative Style (6:57) Functions without Side Effects (6:55) Lazy Evaluation (9:49) Type Systems (11:13) Recursion (3:37) Higher Order Functions (13:05) Functional Patterns (7:19) Week 2: Recursion COMING SOON In this week, you're already prepared to start going deeper. Since ages, recursion has been considered the ugly guy. Some (very) bad teachers encourage against it, saying that it's even worse than Comic Sans. In this week we're going to see that it's not as bad as some say, but it's one of the most powerful tools in programming in general (and in functional programming in particular). You need to learn some tricks to use it properly, and then you'll be ready to forget your loops forever... Recursion Recursive Functions Tail Recursion and Tail Call Optimization Week 3: Functions COMING SOON Functions are the cornerstone of functional programming. You already guessed it... In this week you'll learn new ways to deal with functions, not just to group code together, but to combine and compose several functions to create higher abstractions. You'll get the most from your functions Functions as First Class Citizens Lambdas Partial Applications and Currying Continuation Passing Style Functions Composition Creating expressions Play combine learn Week 4: Functional Transformations COMING SOON We're sure you already use map or reduce functions, but you're not so sure about how to use them properly or how they're implemented internally. Let's master these \"functional functions\" like nobody before Map Filter Fold FlatMap Zip, Foreach, Sort/ed Week 5-10: Functional Patterns COMING SOON Week 5: Functors There you go! After some weeks of functional programming exposure, we're ready to dive into the first weird concept. But don't worry, it's not as hard as it looks: you'll learn what a \"functor\" is and you'll realize that you've been using functors for some time without realizing it! Functor Option Collection Functor Result Functor Week 6: Monoids It wasn't so hard, was it? Now you're going to learn your second functional pattern: the monoid. For that, we're going to implement a small library for validations following all your brand-new knowledge... Monoids Use return values Combine AND validate Combine validatORs Semigroup Monoid is not an insult Week 7: Monads Finally! If you at some point have been scared about functional programming, chances are monads are the cause. After this week, you finally don't be scared anymore, and you'll learn how monads work, how to use them, and how to create your own ones! And most important, at the end you'll realize that \"monads are just monoids in the category of endofunctors\". It's true! What is a monad? Your Results are monads Week 8: Applicatives Now that you know what a monad is, let's go for other powerful functional pattern: the applicative. What is an Applicative? Applicative for Validation This is just a mess! Weeks 9 & 10: Mixing everything together After these 8 weeks, you've learnt a lot of new (and old) concepts. Some of them are so powerful that you'll need weeks (or even months) of practice to be proficient enough. So, in order to accelerate your learning, now we're going to use all those concepts together, in a new library to deal with asynchronous code: we're going to create the Future. Won't somebody please think of the asychronous code? Functor-ize the Future Monad-ize the Future Applicat-ize the Future Won't somebody please think of the sychronous code? Validations Operators of the Future Final Touches Un curso de: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam Buy the course See all courses ","srcFilePath":"src/pages/courses/functional_kotlin.soy","id":"functional_kotlin","location":"/courses/functional_kotlin.html","url":"/courses/functional_kotlin.html"}},"title":"Courses","headTitle":"Functional programming courses and training","description":"Learn functional programming with our courses in your own language","keywords":"functional programming, learn, course, training, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":2,"content":" // Header nav //New init Functional Programming for Mobile Developers Swift and Kotlin are the lastest programming languages for mobile development. You know what? Both include functional constructs by default, allowing you to code in a functional style. Are you going to get stuck with filter, map and reduce? FUNCTIONAL SWIFT Functional Swift Learn functional programming in Swift in a practical way, with examples used in everyday iOS apps. Go to the course FUNCTIONAL KOTLIN Functional Kotlin Learn functional programming in Kotlin in a practical way, with examples used in everyday Android apps. Go to the course //New end //New init Functional Programming for Frontenders Javascript is THE language for the frontend development. But... Did you know that Mocha (then called LiveScript, JavaScript and now ECMAScript) was created to be the \"Scheme in the browser\"? Since Scheme is a dialect of Lisp, functional programming and Javascript has much more in common than what you would think. FUNCTIONAL JavaScript Functional JavaScript With Javascript you can learn functional programming in a practical way: familiar syntax, useful day-to-day examples and out-of-the-box functional constructions make it the perfect language to learn functional programming! Go to the course //New end //New init Functional Programming for Backend Developers The server-side is the natural field for functional programming. With it you'll get better concurrency, which is critical for a server system. However, you don't need to change your stack to Scala or other functional language to enjoy the benefits of functional programming. Using your language you'll be able to improve dramatically how you write code. FUNCTIONAL C# Functional C# Erik Meijer, one of the architects behind C# and LINQ is one of the most strong supporters of functional programming. Because of that, C# has introduced more and more functional constructs with each version. And if you want to go one step further, you always can jump info F# Go to the course FUNCTIONAL JAVA Functional Java Even though Java can't be considered a functional language, you can be introduced to most of the concepts thanks to lambdas and functional interfaces support in Java 8. Don't yearn a new project using Scala. You can start to learn functional programming with Java NOW. Go to the course //New end ","srcFilePath":"src/pages/courses/index.soy","id":"courses","location":"/courses/","url":"/courses/","childIds":["functional_java","functional_kotlin"]}},"title":"Home","headTitle":"Learn functional programming with our courses in Swift, Kotlin, Javascript, C#, Java","description":"functionalHub is the play to learn functional programming with our courses in your language, in a practica way: Swift, Kotlin, Javascript, C#, Java","keywords":"functional programming, learn, course, training, swift, kotlin, javascript, java, c#","content":" ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","childIds":["whyfp","courses","testimonials","blog"]}}