{"title":"Clay","index":{"title":"Home","headTitle":"Learn functional programming with our courses in Swift, Kotlin, Javascript, C#, Java","description":"functionalHub is the play to learn functional programming with our courses in your language, in a practica way: Swift, Kotlin, Javascript, C#, Java","keywords":"functional programming, learn, course, training, swift, kotlin, javascript, java, c#","content":" ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","children":{"blog":{"children":{"history_of_functional_programming":{"title":"A bit of history about functional programming","headTitle":"Functional programming blog and news","description":"Our blog about functional programming","keywords":"functional programming, blog, articles, news","weight":4,"content":" // Header nav //New init A bit of history about functional programming Ahutor: JM 08/01/2018 In these days, it looks like functional programming is the new kid in town, something trendy and cool that you have to know. At least until the next cool thing arrives. But actually, functional programming is quite old. Probably older than you! Let's look back at the past, to the forefathers of computing, in order to understand the present, but also to be able to anticipate the future. Functional programming and imperative programming were born almost at the same time, at least the mathematical theories behing them. In the 30s, Alonzo Church defined Lambda Calculus, which is considered the theory behind functional programming. At the same time, Alan Turing defined his Turing Machine, which is in turn the theory that made imperative programming possible. It was a kind of clash of the titans. A perfect race to define the mathematical model to solve universal computability problems (what we call right now \"programs\"). In the 50s, the race moved to the practical implementations of those theories. John Backus, an IBM employee, created FORTRAN as one of the first \"high level\" imperative programming languages. In the same years, John McCarthy created Lisp in the MIT, as a practical implementation of Lambda Calculus theory. So we can say that FORTRAN is the great-grandfather of all imperative programming languages, while Lisp can be considered the same ancestor of all functional programming languages. But notice the context of both projects: in one hand, IBM wanted a language that solved a business problem, programmers productivity, while Lisp goals were quite different: solve complex computing problems, AI related mainly (yes, McCarthy is the father of the AI also) Both languages competed in the early days of the computer science. But the industry chose the winner quickly: computers (mainframes) where super expensive in those years, and people had to rent machine-time on demand (hello elastic cloud computing). Since the computing time was so expensive, it was critical to save the time wasted compiling and running wrong programs. And given that most of the code was written using punch cards or machine code, most of the programs contained several errors, so most of the computing time was wasted. And FORTRAN compiler were much faster than any other in those years, including the Lisp one. Backus created a super efficient compiler and most of the programmers started to move from machine code to FORTRAN, leaving Lisp (and functional programming) only for some specific problems related to symbolic computation and primitive AI research. But something happened in 1977: Backus received the Turing Award, (which is considered the Nobel prize in computing) for his work in high-level programming languages and FORTRAN. But to everyone's surprise, Backus' Turing Award lecture was focused on how functional programming is the right way to go, instead of using imperative programming and languages like FORTRAN. It was an apology for creating FORTRAN and making imperative programming the standard de-facto in those years. But it was already too late: most of the industry were already using imperative programming because it was more profitable than functional programming. First generations of programmers were shaped around imperative programming ideas, Unix and C were the way-to-go, next generations of programmers followed that trail... and the rest is history. And this is the way we've arrived to these days, where somehow we all developers are sons of C and grandsons of FORTRAN... without choosing it. But what is socking is that we're still using the same programming model for the last 50 years, even though today's hardware allows us to use better paradigms. Why are we stuck in the past? In these years, some programmers out there are wondering: Isn't it today the right time to revisit that \"old idea\" of functional programming? In a world where compilers take seconds to complete their task, and complexity in software is probably the main challenge nowadays, wouldn't be functional programming a feasible approach to achieve better concurrency, testeability and maintainability? So, now you know that if you've learnt C, Pascal or Java it wasn't by coincidence! //New end ","srcFilePath":"src/pages/blog/history_of_functional_programming.soy","id":"history_of_functional_programming","location":"/blog/history_of_functional_programming.html","url":"/blog/history_of_functional_programming.html"}},"title":"Blog","headTitle":"Functional programming blog and news","description":"Our blog about functional programming","keywords":"functional programming, blog, articles, news","weight":4,"content":" ","srcFilePath":"src/pages/blog/index.soy","id":"blog","location":"/blog/","url":"/blog/","childIds":["history_of_functional_programming"]},"testimonials":{"title":"Testimonials","headTitle":"Functional programming course recommendations","description":"Our students recommend our functional programming courses in Swift, Kotin, Javascript, Java or C#","keywords":"functional programming, testimonials, students, review, reviews, rating, ratings, score, like, recommendation","weight":3,"content":" Carlos M. Vicente Herrero&nbsp;&nbsp; Read all testimonials... ","srcFilePath":"src/pages/testimonials/index.soy","id":"testimonials","location":"/testimonials/","url":"/testimonials/","children":{"testimonials":{"title":"All testimonials","headTitle":"Functional programming course recommendations","description":"Our students recommend our functional programming courses in Swift, Kotin, Javascript, Java or C#","keywords":"functional programming, testimonials, students, review, reviews, rating, ratings, score, like, recommendation","weight":3,"content":" // Header nav El nivel del curso es excelente y la manera de transmitirlo muy cercana y de fácil seguimiento. En mi opinión este es un \"must-know\" que cualquier desarrollador, que quiera o necesite elevar su nivel, debería tener en cuenta. Victor Vargas Fariñas&nbsp;&nbsp; Curso muy recomendable para iniciarse en la programación funcional. Incluiría algún ejemplo de desarrollo de una aplicación completa fuera del playground, aunque sea sencilla, por ejemplo en iOS, que de una visión práctica del uso de la programación funcional en un caso real. Jose Humanes Humanes&nbsp;&nbsp; Sin duda, el mejor curso en español que encontrarás sobre programación funcional. Con explicaciones claras y ejemplos muy bien pensados. Al acabar, te preguntarás cómo has podido trabajar sin mónadas todo ese tiempo. Miguel Sánchez Marcos&nbsp;&nbsp; ¡Me ha encantado el curso! Sobre todo por la forma de aprender los conceptos, aplicándolos a ejemplos reales. Totalmente recomendable incluso para personas como yo, que no había programado nunca en programación funcional. Roberto Gómez&nbsp;&nbsp; Hace ya tiempo que me llamaba la atención la programación funcional, pero lo veía como algo complicado y lioso. Gracias a este curso he podido entender los conceptos de manera muy sencilla usando un lenguaje familiar para mi. ¡Totalmente recomendable! Victor Galán&nbsp;&nbsp; Tras varios intentos de aprender las bases de la programación funcional, ya estaba a punto de tirar la toalla: pensaba que este era un tema demasiado teórico y abstracto para mi. Hasta que encontré este curso y gracias a él, por fin he conseguido entender todos los conceptos \"oscuros\", con ejemplos prácticos y 100% aplicables. ¡Ojalá lo hubiera encontrado antes! Daniel Martín García&nbsp;&nbsp; Clear explanations listing the main eight principles of functional programming. I will definitely join the complete course! Rodrigo López-Romero Guijarro&nbsp;&nbsp; Sabía algo acerca de los principios de la programación funcional, ha estado muy bien repasarlos y ampliarlos. Muy bien explicados los conceptos, supongo que se ampliarán más todavía en el curso completo. Solo un pero, en algunos ejemplos con los playgrounds había ocasiones en las que se perdía de vista lo que se quería enseñar, por hacer scroll o similar, pero no afecta demasiado. Jose Luis Nieto&nbsp;&nbsp; El curso introductorio es muy completo y suficiente para animar a comprar el curso completo. Cristian Alex Palomino Rivera&nbsp;&nbsp; Curso 100% recomendable. Sobre todo por la forma de aprender los conceptos. Antes oir hablar de programacion funcional me parecia de otro planeta, pero desde luego puedo decir que todo lo contrario. Eloy Sanz&nbsp;&nbsp; Para ser una introducción es muy clara y completa. Además las explicaciones son muy amenas y dejan con ganas de más... Espero poder hacer el completo Fco José Pérez&nbsp;&nbsp; Me parece bastante util, al inicio es algo confuso para entender pero poco a poco vas captando Manuel Salinas&nbsp;&nbsp; Conceptos claros y bien explicados. Accesible para cualquiera con nociones básicas de Swift. Recomendado. Jorge D. Ortiz Fuentes&nbsp;&nbsp; Totalmente recomendable, un curso muy ameno y con los conceptos clave muy bien explicados. Enhorabuena ;-) José Sancho Monrabal&nbsp;&nbsp; Este curso ha servido para llamar mi atención sobre el uso de la programación funcional y su aplicación a problemas del día a día, esto con ayuda de Kotlin. ¡No puedo esperar para estudiar el siguiente curso! Mauricio Hernández Oyarzábal&nbsp;&nbsp; Inicio desde lo más básico de la programación funcional y ampliando conceptos de un modo muy claro. Muy recomendable. Edgar Miró&nbsp;&nbsp; Me ha parecido una buena introducción, quizás algunos de los video se podían extender un poco mas porque incluso siendo introducción son bastante básicos. Pero en general esta muy bien, la voz del video es relajada y ayuda a entender bien la información que se da. Si se cliquea en el siguiente video cuando se ha visto mas de la mitad o tres cuartos se debería preguntar si se quiere marcar como visto. En mi caso, cuando estaba casi al final y quedaban 10 o 20 segundos cliqueaba en el siguiente pero cuando iba por el octavo me di cuenta que ninguno de los anteriores estaba marcado como visto así que tube que ir uno a uno clickando en siguiente. Cuando se cliquea en siguiente aparece uno botón verde por unos instantes al lado, tiene algo escrito de dice \"...nota...\" o algo así pero desaparece enseguida así que debe de ser un bug. Estaría bien que al terminar el ultimo video se diera la option de comprar el curso automaticamente y que el siguiente video del curso comenzara nada mas hacer la transacción. Javier Pardo&nbsp;&nbsp; Una gran introducción a los conceptos básicos de la programación funcional. Se me ha hecho corto, esperando el curso completo! Jesús Soria Seco&nbsp;&nbsp; Se explica todo de forma muy experta y sencilla. Sin perderse en detalles pero no dejando nada en el aire. Todo se clarifica perfectamente en los ejemplos. Ismael Florit Zacarias&nbsp;&nbsp; Simplemente el curso no tiene desperdicios. Aun que en mi día a día, no trabajo con lenguajes funcionales puros, la introducción me abrió el apetito por ellos. Luego de este curso me siento mejor programador, ahora comprendo la utilidad de la programación funcional y por qué su gran auge y la tendencia al uso de librerías como Reactive Extensions. Apropósito, me encanta la forma en que explican los temas ¡Muy simple y directo al punto! ¡Muy buen trabajo! Arturo Mejia&nbsp;&nbsp; Se explican muy bien los conceptos básicos de la FP, y el contenido del curso restante tiene muy buena pinta. Patxi Bocos&nbsp;&nbsp; Muy buena introducción a programación funcional. He compartido este curso en mis redes sociales me parece una introducción necesaria para poder exprimir Kotlin como nuevo lenguaje soportado oficialmente para Android. Roberto Carlos Gonzalez Flores&nbsp;&nbsp; Estoy verdaderamente contento con las explicaciones, duración, claridad y ejemplos en este curso introductorio. Espero con ansias poder ver el curso completo, ya que personalmente la FP me ha interesado mucho desde que la conocí e igualmente Kotlin. Ricardo Quiroz Bazan&nbsp;&nbsp; La introducción tiene muy buena pinta, promete. Espero que lo publiquen pronto. Daniel García Rivas&nbsp;&nbsp; La introducción al curso me ha dejado con ganas de aprender mucho más sobre programación funcional. Enfoca muy bien los temas que se van a tratar y no se hace para nada pesado. A su vez orientar el temario a situaciones reales de uso es un puntazo. Mis felicitaciones. Mikel Balduciel Diaz&nbsp;&nbsp; El primer día que alguien me habló de programación funcional no entendía nada, 6 meses despues y un par de charlas entendía menos aún, ahora con este curso he visto que es mucho más sencillo de lo que pensaba, cada cápitulo te ayuda a entender este paradigma de forma muy amena y con un gran contenido didáctico. Sergio Muriana&nbsp;&nbsp; Gran curso de introducción que te mantiene siempre expectativo. Además, explica los conceptos de forma clara y concisa. Fco Javier Rodríguez Crespo&nbsp;&nbsp; Trabajo como desarrollador Android, y llevo ya un cierto tiempo introduciéndome en el mundo de la programación funcional y en Kotlin. He leído bastantes artículos y seguido diversos tutoriales acerca de ambas materias, y he quedado gratamente sorprendido con la introducción al curso. Los vídeos tienen una duración razonable, los contenidos están bien explicados, y los ejemplos prácticos resultan muy últiles. Destaco entre todos, el snippet para convertir una serie de métodos y llamadas en stateless; gran trabajo! Solo he echado en falta que en esta introducción no se haya hecho mención a las \"Funciones de Extensión\", que es sin duda uno de los aspectos más innovadores que he visto en Kotlin. De salir pronto, y tras revisar los contenidos, estaría interesado en hacer el curso. Muchas gracias, and keep it up! P S&nbsp;&nbsp; Conceptos claros con ejemplos muy fáciles de seguir, que hacen que este curso de introducción sea de 10! Jorge Castrejon&nbsp;&nbsp; He disfrutado con el material proporcionado. Para los que tenemos una mínima experiencia en Kotlin se hace muy ameno y entretenido además de útil. Angel Vázquez Vázquez&nbsp;&nbsp; Los videos están muy bien enfocados y, aún solo siendo una introducción, enseña muchas de las ventajas de la programación funcional. Un material muy ameno y recomendable. Daniel García Frias&nbsp;&nbsp; Ha sido MUY AMENO y entretenido! Como critica constructiva, se me ha hecho demasiado corto!!! RAFAEL Carmona Grande&nbsp;&nbsp; Estupenda iniciativa. Un curso realmente apetecible. Si el curso es tan didáctico y ameno como lo visto hasta ahora creo que por fin voy a dar el salto y el cambio de paradigma a la funcional. Saludos Antonio Carabantes Millán&nbsp;&nbsp; Una excelente presentación y una estructura que te van introduciendo poco a poco y de manera ordenada en el mundo de la programación funcional. ¡Sin duda estos chicos se lo han currado! Fernando Vega&nbsp;&nbsp; Es una introducción que a pesar de lo corta es profunda y, al mismo, tiempo accesible para personas con poco o ningún conocimiento de funcional. Sin duda una genial puerta de entrada a este mundo y, ¡En nuestro idioma! Pau Arlandis Martinez&nbsp;&nbsp; Conceptos muy bien explicados, buenos ejemplos, y videos muy amenos de seguir y cuidados al detalle con zoom al código cuando corresponde. Al B.&nbsp;&nbsp; Muy buenos videos. Bien explicados y amenos. Buen ritmo, buen tono y muy buenos ejemplos. Pedro Ríos Pérez&nbsp;&nbsp; ","srcFilePath":"src/pages/testimonials/testimonials.soy","id":"testimonials","location":"/testimonials/testimonials.html","url":"/testimonials/testimonials.html"}},"childIds":["testimonials"]},"courses":{"children":{"functional_csharp":{"title":"Functional C#","headTitle":"Functional programming with C# course","description":"Learn functional programming in C# language for Android","keywords":"C#, functional programming, learn, course, training, linq, optional, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":0,"content":" // Header nav // Functional Programming for C# Developers Learn the main concepts of functional programming using C# in a simple and practical way Subscribe now and get 25% off when the course is ready! [🌽, 🐮, 🐔].map(cook) == [🍿, 🍔, 🍳] Are you stuck in filter or map? Are you tired of reading that \"A monad is just a monoid in the category of endofunctors\"? Do you think that functional programming is too abstract and academic for your taste? If you answered YES to any of those questions, then this is the couse you're looking for 😉 Subscribe now and get 25% off when the course is ready! And if you still has some questions, maybe this can be helpful: Why should I learn functional programming? Well, let&#39;s say it will give you more tools to be a better programmer, no matter what programming language you use. Maybe you can&#39;t use FP in your daily basis (yeah, your boss is a dinosaur), but we&#39;re sure that if you learn these concepts, your programming style will improve A LOT. And why should I use C# to learn functional programming? Erik Meijer, one of the architects behind C# and LINQ is one of the most strong supporters of functional programming. Because of that, C# has introduced more and more functional constructs with each version. This means that C# is the perfect language to explore the new fields of functional programming without leaving the confort of your language. And after doing this course, it will be easier than ever to jump into F# But, are you sure this is really useful? Sure thing! Some benefits of programming with functional style: It will allow you to make some tasks that would be must harder using your traditional style. Notice that Google used some functional core concepts from the very begining. Your code will be cleaner, with (much) less variables, and you wouldn&#39;t worry by &quot;what if this is null&quot; Your code will be more robust, will much less errors. The compiler will detect much more errors for you following the functional style. Also, your coding style will allow you to detect errors faster and easier. Your code will be more maintainable and adaptable. As Joe Armstrong said, the inventor of Erlang, with OOP you wanted a banana but what you got was a gorilla holding the banana and the entire jungle. Is it going to be difficult? It&#39;s not difficult, it&#39;s quite simple. But it&#39;s different to the OOP style, that you&#39;re probably used to. Rich Hickey, the inventor of Clojure, explained in his famous talk &quot;Simple made Easy&quot; the difference between &quot;easy&quot; (something you&#39;re use to, even though it&#39;s a mess) and &quot;simple&quot; (something that can be explained and understood quickly, without effort, even though it may be quite new for you). Functional programming is simple, but even you&#39;re an experienced developers, you&#39;ll have to learn scratch. But we&#39;re sure that this isn&#39;t anything for PhD&#39;s, as you probably believed. But you&#39;ll have to invest enough effort: no pain, no gain, my friend... How are you going to teach it? Using short video lessons, less than 20 minutes, where you&#39;ll find explanations about specific concepts and techniques. They&#39;re usually simple concepts, but with a lot of uses and potential applications. Don&#39;t worry if you don&#39;t get it at first. That&#39;s normal, and you&#39;ll probably have to listen some videos more than once, in order to understand all the details. Each video includes several practical and everyday examples. We won&#39;t talk about fibonacci, factorials and other mathematical examples. We&#39;ll use daily situations and challenges, but solved differently. And if next you want to jump into pure functional languages, it will be much easier for you. I don&#39;t know C#, but I know how to code in X Awesome! C# is just the vehicle, but the important thing is the payload. Our code is quite easy to read and we use the simplest features of the language. It&#39;s in fact a good way to be introduced in a new language from a different side: instead of focusing on the syntax, focusing on the style. Is there any other requirement? Not really: you need to know how to code in any language (better if it&#39;s an OOP language), and you need to be interested in learning functional programming. And it&#39;s even better if you already tried to learn FP without success. After this couse, you&#39;ll realize it wasn&#39;t that difficult Subscribe now and get 25% off when the course is ready! We're working on the course, so subscribe now and you'll get 25% off as soon as it's ready! ","srcFilePath":"src/pages/courses/functional_csharp.soy","id":"functional_csharp","location":"/courses/functional_csharp.html","url":"/courses/functional_csharp.html"},"functional_java":{"title":"Functional Java","headTitle":"Functional programming with Java course","description":"Learn functional programming in Java language for Android","keywords":"Java, functional programming, learn, course, training, android, java, jvm, java8, stream, optional, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":0,"content":" // Header nav // Functional Programming for Java Developers Learn the main concepts of functional programming using Java in a simple and practical way Subscribe now and get 25% off when the course is ready! [🌽, 🐮, 🐔].stream().map(cook) == [🍿, 🍔, 🍳] Are you stuck in filter or map? Are you tired of reading that \"A monad is just a monoid in the category of endofunctors\"? Do you think that functional programming is too abstract and academic for your taste? If you answered YES to any of those questions, then this is the couse you're looking for 😉 Course contents Week 1: Introduction COMING SOON As any great story, we need to start from the very begining. In order to warm engines, we'll see what functional programming is and what their basic principles are. What is functional programming? Mutable State Sucks How to become stateless Declarative Style Functions without Side Effects Lazy Evaluation Type Systems Recursion Higher Order Functions Functional Patterns Week 2: Recursion COMING SOON In this week, you're already prepared to start going deeper. Since ages, recursion has been considered the ugly guy. Some (very) bad teachers encourage against it, saying that it's even worse than Comic Sans. In this week we're going to see that it's not as bad as some say, but it's one of the most powerful tools in programming in general (and in functional programming in particular). You need to learn some tricks to use it properly, and then you'll be ready to forget your loops forever... Recursion Recursive Functions Tail Recursion and Tail Call Optimization Week 3: Functions COMING SOON Functions are the cornerstone of functional programming. You already guessed it... In this week you'll learn new ways to deal with functions, not just to group code together, but to combine and compose several functions to create higher abstractions. You'll get the most from your functions Functions as First Class Citizens Lambdas Partial Applications and Currying Continuation Passing Style Functions Composition Creating expressions Play combine learn Week 4: Functional Transformations COMING SOON We're sure you already use stream's map or reduce functions, but you're not so sure about how to use them properly or how they're implemented internally. Let's master these \"functional functions\" like nobody before map filter reduce flatMap forEach, sorted, skip, concat... Week 5-10: Functional Patterns COMING SOON Week 5: Functors There you go! After some weeks of functional programming exposure, we're ready to dive into the first weird concept. But don't worry, it's not as hard as it looks: you'll learn what a \"functor\" is and you'll realize that you've been using functors for some time without realizing it! Functor Option Collection Functor Result Functor Week 6: Monoids It wasn't so hard, was it? Now you're going to learn your second functional pattern: the monoid. For that, we're going to implement a small library for validations following all your brand-new knowledge... Monoids Use return values Combine AND validate Combine validatORs Semigroup Monoid is not an insult Week 7: Monads Finally! If you at some point have been scared about functional programming, chances are monads are the cause. After this week, you finally don't be scared anymore, and you'll learn how monads work, how to use them, and how to create your own ones! And most important, at the end you'll realize that \"monads are just monoids in the category of endofunctors\". It's true! What is a monad? Your Results are monads Week 8: Applicatives Now that you know what a monad is, let's go for other powerful functional pattern: the applicative. What is an Applicative? Applicative for Validation This is just a mess! Weeks 9 & 10: Mixing everything together After these 8 weeks, you've learnt a lot of new (and old) concepts. Some of them are so powerful that you'll need weeks (or even months) of practice to be proficient enough. So, in order to accelerate your learning, now we're going to use all those concepts together, in a new library to deal with asynchronous code: we're going to create the Future. Won't somebody please think of the asychronous code? Functor-ize the Future Monad-ize the Future Applicat-ize the Future Won't somebody please think of the sychronous code? Validations Operators of the Future Final Touches Subscribe now and get 25% off when the course is ready! And if you still has some questions, maybe this can be helpful: Why should I learn functional programming? Well, let&#39;s say it will give you more tools to be a better programmer, no matter what programming language you use. Maybe you can&#39;t use FP in your daily basis (yeah, your boss is a dinosaur), but we&#39;re sure that if you learn these concepts, your programming style will improve A LOT. And why should I use Java to learn functional programming? It's true that Java is a verbose language and probably Kotlin or Scala are better options to learn functional programming. However, if you can't get rid of Java, using it will be much more pragmatic: you'll be able to use in your Java projects everything you learn in this course But, are you sure this is really useful? Sure thing! Some benefits of programming with functional style: It will allow you to make some tasks that would be must harder using your traditional style. Notice that Google used some functional core concepts from the very begining. Your code will be cleaner, with (much) less variables, and you wouldn&#39;t worry by &quot;what if this is null&quot; Your code will be more robust, will much less errors. The compiler will detect much more errors for you following the functional style. Also, your coding style will allow you to detect errors faster and easier. Your code will be more maintainable and adaptable. As Joe Armstrong said, the inventor of Erlang, with OOP you wanted a banana but what you got was a gorilla holding the banana and the entire jungle. Is it going to be difficult? It&#39;s not difficult, it&#39;s quite simple. But it&#39;s different to the OOP style, that you&#39;re probably used to. Rich Hickey, the inventor of Clojure, explained in his famous talk &quot;Simple made Easy&quot; the difference between &quot;easy&quot; (something you&#39;re use to, even though it&#39;s a mess) and &quot;simple&quot; (something that can be explained and understood quickly, without effort, even though it may be quite new for you). Functional programming is simple, but even you&#39;re an experienced developers, you&#39;ll have to learn scratch. But we&#39;re sure that this isn&#39;t anything for PhD&#39;s, as you probably believed. But you&#39;ll have to invest enough effort: no pain, no gain, my friend... How are you going to teach it? Using short video lessons, less than 20 minutes, where you&#39;ll find explanations about specific concepts and techniques. They&#39;re usually simple concepts, but with a lot of uses and potential applications. Don&#39;t worry if you don&#39;t get it at first. That&#39;s normal, and you&#39;ll probably have to listen some videos more than once, in order to understand all the details. Each video includes several practical and everyday examples. We won&#39;t talk about fibonacci, factorials and other mathematical examples. We&#39;ll use daily situations and challenges, but solved differently. And if next you want to jump into pure functional languages, it will be much easier for you. I don&#39;t know Java, but I know how to code in X Awesome! Java is just the vehicle, but the important thing is the payload. Our code is quite easy to read and we use the simplest features of the language. It&#39;s in fact a good way to be introduced in a new language from a different side: instead of focusing on the syntax, focusing on the style. Is there any other requirement? Not really: you need to know how to code in any language (better if it&#39;s an OOP language), and you need to be interested in learning functional programming. And it&#39;s even better if you already tried to learn FP without success. After this couse, you&#39;ll realize it wasn&#39;t that difficult Subscribe now and get 25% off when the course is ready! We're working on the course, so subscribe now and you'll get 25% off as soon as it's ready! ","srcFilePath":"src/pages/courses/functional_java.soy","id":"functional_java","location":"/courses/functional_java.html","url":"/courses/functional_java.html"},"functional_javascript":{"title":"Functional JavaScript","headTitle":"Functional programming with JavaScript course","description":"Learn functional programming in JavaScript language for Android","keywords":"JavaScript, functional programming, learn, course, training, typescript, purescript, optional, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":0,"content":" // Header nav // Functional Programming for JavaScript Developers Learn the main concepts of functional programming using JavaScript in a simple and practical way Subscribe now and get 25% off when the course is ready! [🌽, 🐮, 🐔].map(cook) == [🍿, 🍔, 🍳] Are you stuck in filter or map? Are you tired of reading that \"A monad is just a monoid in the category of endofunctors\"? Do you think that functional programming is too abstract and academic for your taste? If you answered YES to any of those questions, then this is the couse you're looking for 😉 Course contents Week 1: Introduction COMING SOON As any great story, we need to start from the very begining. In order to warm engines, we'll see what functional programming is and what their basic principles are. What is functional programming? Mutable State Sucks How to become stateless Declarative Style Functions without Side Effects Lazy Evaluation Type Systems Recursion Higher Order Functions Functional Patterns Week 2: Recursion COMING SOON In this week, you're already prepared to start going deeper. Since ages, recursion has been considered the ugly guy. Some (very) bad teachers encourage against it, saying that it's even worse than Comic Sans. In this week we're going to see that it's not as bad as some say, but it's one of the most powerful tools in programming in general (and in functional programming in particular). You need to learn some tricks to use it properly, and then you'll be ready to forget your loops forever... Recursion Recursive Functions Tail Recursion and Tail Call Optimization Week 3: Functions COMING SOON Functions are the cornerstone of functional programming. You already guessed it... In this week you'll learn new ways to deal with functions, not just to group code together, but to combine and compose several functions to create higher abstractions. You'll get the most from your functions Functions as First Class Citizens Lambdas Partial Applications and Currying Continuation Passing Style Functions Composition Creating expressions Play combine learn Week 4: Functional Transformations COMING SOON We're sure you already use stream's map or reduce functions, but you're not so sure about how to use them properly or how they're implemented internally. Let's master these \"functional functions\" like nobody before map filter reduce flatMap forEach, sorted, skip, concat... Week 5-10: Functional Patterns COMING SOON Week 5: Functors There you go! After some weeks of functional programming exposure, we're ready to dive into the first weird concept. But don't worry, it's not as hard as it looks: you'll learn what a \"functor\" is and you'll realize that you've been using functors for some time without realizing it! Functor Option Collection Functor Result Functor Week 6: Monoids It wasn't so hard, was it? Now you're going to learn your second functional pattern: the monoid. For that, we're going to implement a small library for validations following all your brand-new knowledge... Monoids Use return values Combine AND validate Combine validatORs Semigroup Monoid is not an insult Week 7: Monads Finally! If you at some point have been scared about functional programming, chances are monads are the cause. After this week, you finally don't be scared anymore, and you'll learn how monads work, how to use them, and how to create your own ones! And most important, at the end you'll realize that \"monads are just monoids in the category of endofunctors\". It's true! What is a monad? Your Results are monads Week 8: Applicatives Now that you know what a monad is, let's go for other powerful functional pattern: the applicative. What is an Applicative? Applicative for Validation This is just a mess! Weeks 9 & 10: Mixing everything together After these 8 weeks, you've learnt a lot of new (and old) concepts. Some of them are so powerful that you'll need weeks (or even months) of practice to be proficient enough. So, in order to accelerate your learning, now we're going to use all those concepts together, in a new library to deal with asynchronous code: we're going to create the Future. Won't somebody please think of the asychronous code? Functor-ize the Future Monad-ize the Future Applicat-ize the Future Won't somebody please think of the sychronous code? Validations Operators of the Future Final Touches Subscribe now and get 25% off when the course is ready! And if you still has some questions, maybe this can be helpful: Why should I learn functional programming? Well, let&#39;s say it will give you more tools to be a better programmer, no matter what programming language you use. Maybe you can&#39;t use FP in your daily basis (yeah, your boss is a dinosaur), but we&#39;re sure that if you learn these concepts, your programming style will improve A LOT. And why should I use JavaScript to learn functional programming? Did you know that Mocha (then called LiveScript, Javascript and now ECMAScript) was created to be the \"Scheme in the browser\"? Since Scheme is a dialect of Lisp, functional programming and Javascript has much more in common than what you would think. Javascript used to be the language of the Web, but in these days, it's much more than that. You can use Javascript eveywhere, from browsers, servers, mobile devices and even IoT devices. If you're a Javascript developer, it seems that you did a very good investment learning it! With the skills you will learn in this course you would develop functional software in any platform and even be able to share code between them. With Javascript you can learn functional programming in a practical way: familiar syntax, useful day-to-day examples and out-of-the-box functional constructions make it the perfect language to learn functional programming.* But, are you sure this is really useful? Sure thing! Some benefits of programming with functional style: It will allow you to make some tasks that would be must harder using your traditional style. Notice that Google used some functional core concepts from the very begining. Your code will be cleaner, with (much) less variables, and you wouldn&#39;t worry by &quot;what if this is null&quot; Your code will be more robust, will much less errors. The compiler will detect much more errors for you following the functional style. Also, your coding style will allow you to detect errors faster and easier. Your code will be more maintainable and adaptable. As Joe Armstrong said, the inventor of Erlang, with OOP you wanted a banana but what you got was a gorilla holding the banana and the entire jungle. Is it going to be difficult? It&#39;s not difficult, it&#39;s quite simple. But it&#39;s different to the OOP style, that you&#39;re probably used to. Rich Hickey, the inventor of Clojure, explained in his famous talk &quot;Simple made Easy&quot; the difference between &quot;easy&quot; (something you&#39;re use to, even though it&#39;s a mess) and &quot;simple&quot; (something that can be explained and understood quickly, without effort, even though it may be quite new for you). Functional programming is simple, but even you&#39;re an experienced developers, you&#39;ll have to learn scratch. But we&#39;re sure that this isn&#39;t anything for PhD&#39;s, as you probably believed. But you&#39;ll have to invest enough effort: no pain, no gain, my friend... How are you going to teach it? Using short video lessons, less than 20 minutes, where you&#39;ll find explanations about specific concepts and techniques. They&#39;re usually simple concepts, but with a lot of uses and potential applications. Don&#39;t worry if you don&#39;t get it at first. That&#39;s normal, and you&#39;ll probably have to listen some videos more than once, in order to understand all the details. Each video includes several practical and everyday examples. We won&#39;t talk about fibonacci, factorials and other mathematical examples. We&#39;ll use daily situations and challenges, but solved differently. And if next you want to jump into pure functional languages, it will be much easier for you. I don&#39;t know JavaScript, but I know how to code in X Awesome! JavaScript is just the vehicle, but the important thing is the payload. Our code is quite easy to read and we use the simplest features of the language. It&#39;s in fact a good way to be introduced in a new language from a different side: instead of focusing on the syntax, focusing on the style. Is there any other requirement? Not really: you need to know how to code in any language (better if it&#39;s an OOP language), and you need to be interested in learning functional programming. And it&#39;s even better if you already tried to learn FP without success. After this couse, you&#39;ll realize it wasn&#39;t that difficult Subscribe now and get 25% off when the course is ready! We're working on the course, so subscribe now and you'll get 25% off as soon as it's ready! ","srcFilePath":"src/pages/courses/functional_javascript.soy","id":"functional_javascript","location":"/courses/functional_javascript.html","url":"/courses/functional_javascript.html"},"functional_kotlin":{"title":"Functional Kotlin","headTitle":"Functional programming with Kotlin course","description":"Learn functional programming in Kotlin language for Android","keywords":"kotlin, functional programming, learn, course, training, android, java, jvm, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":0,"content":" ","srcFilePath":"src/pages/courses/functional_kotlin.soy","id":"functional_kotlin","location":"/courses/functional_kotlin.html","url":"/courses/functional_kotlin.html"},"functional_swift":{"title":"Functional Swift","headTitle":"Functional programming with Swift course","description":"Learn functional programming in Swift language for iOS","keywords":"Swift, functional programming, learn, course, training, ios, apple, objective-c, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":0,"content":" ","srcFilePath":"src/pages/courses/functional_swift.soy","id":"functional_swift","location":"/courses/functional_swift.html","url":"/courses/functional_swift.html"}},"title":"Courses","headTitle":"Functional programming courses and training","description":"Learn functional programming with our courses in your own language","keywords":"functional programming, learn, course, training, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative","weight":2,"content":" // Header nav Functional programming for everyone Functional programming used to be a difficult thing to learn: composition, currying, functors or monads can be intimidating words. On top of that, most of the contents you can find in the Internet are too academic or use pure languages with weird syntax like Haskell or Lisp. We tried to learn FP a few years ago, and we realized there was a lack of practical courses using hybrid and mainstream languages. After all, if you want to learn new concepts, it's better to learn them in your own language. If not, you probably will get lost in the new syntax. So, no matter what language you work on, you can learn functional programming with us! //New init For Mobile Developers Swift and Kotlin are the lastest programming languages for mobile development. You know what? Both include functional constructs by default, allowing you to code in a functional style. Are you going to get stuck with filter, map and reduce? FUNCTIONAL SWIFT Functional Swift Learn functional programming in Swift in a practical way, with examples used in everyday iOS apps. Go to the course FUNCTIONAL KOTLIN Functional Kotlin Learn functional programming in Kotlin in a practical way, with examples used in everyday Android apps. Go to the course //New end //New init For Frontend Developers Javascript is THE language for the frontend development. But... Did you know that Mocha (then called LiveScript, JavaScript and now ECMAScript) was created to be the \"Scheme in the browser\"? Since Scheme is a dialect of Lisp, functional programming and Javascript has much more in common than what you would think. FUNCTIONAL JavaScript Functional JavaScript With Javascript you can learn functional programming in a practical way: familiar syntax, useful day-to-day examples and out-of-the-box functional constructions make it the perfect language to learn functional programming! Go to the course //New end //New init For Backend Developers The server-side is the natural field for functional programming. With it you'll get better concurrency, which is critical for a server system. However, you don't need to change your stack to Scala or other functional language to enjoy the benefits of functional programming. Using your own language you'll be able to improve dramatically how you write code. FUNCTIONAL C# Functional C# Erik Meijer, one of the architects behind C# and LINQ is one of the most strong supporters of functional programming. Because of that, C# has introduced more and more functional constructs with each version. And if you want to go one step further, you always can jump info F# Go to the course FUNCTIONAL JAVA Functional Java Even though Java can't be considered a functional language, you can be introduced to most of the concepts thanks to lambdas and functional interfaces support in Java 8. Don't yearn a new project using Scala. You can start to learn functional programming with Java NOW. Go to the course //New end ","srcFilePath":"src/pages/courses/index.soy","id":"courses","location":"/courses/","url":"/courses/","childIds":["functional_csharp","functional_java","functional_javascript","functional_kotlin","functional_swift"]}},"childIds":["courses","testimonials","blog"]}}