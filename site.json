{"title":"Clay","index":{"children":{"blog":{"title":"Blog","description":"Our Blog about functional programming","weight":3,"content":" // Header nav //New init Only learn FP by: Jose Manuel 13/05/2017 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum condimentum eros ante, nec sagittis arcu venenatis eget. Donec at sollicitudin leo. Phasellus egestas metus eu urna euismod, non iaculis neque auctor. Vivamus congue convallis arcu, at dapibus quam. Nulla facilisi. Aliquam varius rhoncus odio quis cursus. Nunc placerat, nulla id sodales ornare, risus ligula tempor urna, consequat tincidunt eros libero sed diam. Aliquam tempor orci dignissim malesuada aliquam. Praesent elit turpis, tincidunt sed justo vel, dapibus feugiat risus. Nullam lobortis purus sed volutpat facilisis. Nulla at neque nec purus maximus iaculis non sit amet magna. Fusce pulvinar placerat volutpat. Vivamus ac nisi velit. Cras sodales dolor ut euismod vulputate. Sed tempus justo dui, quis rhoncus mi sagittis quis. Phasellus sem nibh, euismod eget felis id, tincidunt viverra ligula. In euismod elementum porttitor. Aenean ut sodales tellus. Nulla facilisi. Donec porttitor eros nec nisl iaculis, in sodales nisl pellentesque. Mauris non ullamcorper ipsum, sit amet placerat enim. Suspendisse tristique vel sem at tincidunt Curabitur quis faucibus augue, consequat venenatis lacus. Aliquam et arcu vitae nisi dictum rhoncus quis nec orci. Cras libero eros, lobortis id orci eu, commodo egestas nisi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget felis libero. Sed placerat orci vel maximus accumsan. Vestibulum sagittis dui non facilisis lacinia. Etiam fringilla sollicitudin nisl vitae lobortis. Nullam sed eros justo. Donec sit amet convallis libero. Aliquam ac sapien sed nisl tincidunt dignissim eget et mi. Praesent ut iaculis est. Suspendisse blandit tempus hendrerit. Phasellus commodo, dolor at finibus commodo, massa elit maximus tellus, eu iaculis lectus est ut magna. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer bibendum ut nibh vitae venenatis. Cras ac felis nec metus accumsan congue et nec nulla. In hac habitasse platea dictumst. Aenean leo nulla, luctus eget mattis quis, tempor ac urna. Quisque enim elit, mattis quis suscipit quis, mollis nec sem. Sed sit amet ex a ex eleifend varius. Fusce dignissim urna sed odio malesuada lacinia et ac ligula. Quisque diam nibh, mollis efficitur cursus ut, ultricies ut metus. Nulla nec egestas neque. In vel odio urna. In eu sollicitudin ante. Sed dictum mollis felis ut porta. Nullam id velit egestas, molestie lacus vitae, elementum ante. Suspendisse ut ligula dolor. In rutrum tortor risus, sed hendrerit odio tincidunt at. Sed sollicitudin quam malesuada, venenatis ipsum sed, tristique lectus. Cras eu tincidunt turpis. Aenean ac nisi sed nulla tincidunt consectetur. In laoreet felis nec velit euismod, at tincidunt felis mollis. //New end ","srcFilePath":"src/pages/blog.soy","id":"blog","location":"/blog.html","url":"/blog.html"},"whyfp":{"title":"Why FP?","description":"Why functional programming is important for your career?","weight":1,"content":" // Header nav //New init Why FP? Hola de nuevo! üëãüèª Aunque as√≠ lo parezca, me temo que la programaci√≥n no tiene nada de moda üíÖüèº, y mucho menos de \"nueva\"... en realidad la programaci√≥n funcional es muy vieja. Mucho m√°s que t√∫. Hoy vamos a mirar al pasado, a los pioneros de la inform√°tica, para entender el presente, y sobre todo, para ser capaces de anticiparnos al futuro. üîÆ La programaci√≥n funcional y la programaci√≥n imperativa nacieron al mismo tiempo, al menos a nivel te√≥rico, all√° por los a√±os 30. Mientras Alonzo Church defin√≠a su C√°lculo Lambda ∆õ, que es la base te√≥rica de la programaci√≥n funcional, Alan Turing hac√≠a lo propio con su M√°quina de Turing üé∞, que es a su vez la teor√≠a matem√°tica sobre la que se basa la programaci√≥n imperativa. Era un duelo de titanes, para ver quien defin√≠a el modelo te√≥rico (a nivel matem√°tico) que mejor pudiese resolver problemas computables universales (vamos, programas). Ya en los a√±os 50, la carrera se movi√≥ al plano m√°s pr√°ctico. John Backus, un trabajador de IBM, cre√≥ FORTRAN como implementaci√≥n real de ese modelo te√≥rico de computaci√≥n imperativa que defini√≥ Turing. M√°s o menos al mismo tiempo, en el MIT de Boston, John McCarthy hizo algo parecido creando Lisp, pero basado en el C√°lculo Lambda de Church. Otra vez la batalla estaba servida. Podr√≠amos decir que FORTRAN es el tatarabuelo de todos los lenguajes de programaci√≥n imperativos, y Lisp ocupa un lugar parecido para todos los lenguajes funcionales. Es importante fijarse el contexto donde nacen ambos proyectos: por un lado IBM, que como empresa pura y dura, busca soluciones econ√≥micamente viables a problemas de sus clientes. Y por otro lado el MIT, que es el laboratorio donde se conciben las ideas m√°s revolucionarias y futuristas del mundo. Esto es importante tenerlo en cuenta ü§î Durante a√±os, ambos lenguajes compitieron por liderar la incipiente industria de la inform√°tica. Sin embargo, un \"peque√±o detalle\" hizo inclinar la balanza: las m√°quinas eran car√≠simas en aquellos a√±os, as√≠ que se programaba con papel y boli, y luego se alquilaban una m√°quina por horas (cloud computing?) para que alguien, normalmente una se√±orita (s√≠ amigos, las mujeres fueron las primeras programadoras üë©üèª‚Äçüíª), introdujese el programa en el ordenador, lo compilase y lo ejecutase, imprimiendo el resultado con una impresora matricial üñ® Lo que inclin√≥ la balanza fue que un programa escrito en FORTRAN (con estilo imperativo), se compilaba y ejecutaba infinitamente m√°s r√°pido que el mismo programa escrito en Lisp (con estilo funcional). Backus hab√≠a hecho un compilador muy eficiente para la √©poca, ya que a IBM le preocupaba, y mucho, el aspecto econ√≥mico üí∏ Ponte en su lugar: si tu programa en estilo imperativo tarda minutos en compilarse, pero el mismo programa en estilo funcional tarda horas o hasta d√≠as, y tienes que pagar por ese tiempo de procesamiento, t√∫ tambi√©n dejar√≠as de lado el estilo funcional ¬øverdad? ü§ë As√≠ que en los siguientes a√±os, Lisp se fue dejando como la herramienta para resolver problemas especialmente complejos (como la inteligencia artificial), donde la rentabilidad econ√≥mica no era tan importante como conseguir una soluci√≥n a tu problema. Y llegamos al a√±o 1977, donde Backus recibi√≥ el premio Turing (el Nobel de los inform√°ticos) por su trabajo en el √°rea de compiladores. Realmente el compilador de FORTRAN era muy bueno y avanzado. Pero para sorpresa de todos, en su discurso de la entrega del premio, en vez de sacar pecho, lo que hizo fue criticar duramente a los lenguajes imperativos y present√≥ a los lenguajes funcionales como la alternativa correcta. ¬°Estaba entonando un mea-culpa, tirando por tierra su propia creaci√≥n, por la que le estaban dando su premio m√°s importante! üòµ Pero ya era tarde: la industria ya hab√≠a elegido el camino m√°s rentable y pragm√°tico, las primeras generaciones de programadores se hab√≠an forjado en el modelo imperativo (recuerda, el √∫nico viable para el hardware de la √©poca), Unix y sus heroes, marcaron la pauta a partir de aquellos a√±os, C se volvi√≥ el lenguaje de referencia... y el resto ya es historia. Y as√≠ hemos llegado hasta el d√≠a de hoy, donde, en cierta manera, todos los desarrolladores actuales somos hijos de C y nietos de FORTRAN, pero sin haberlo elegido. Lo que resulta llamativo es que ya no tenemos esas restricciones de hardware, pero seguimos utilizando un modelo de programaci√≥n propio de los a√±os 50. Es duro decirlo, pero es as√≠. üèö Y desde hace unos cuantos a√±os, muchos programadores se est√°n haciendo la misma pregunta... ¬øno es el momento ya de retomar esa ‚Äúvieja idea‚Äù de la programaci√≥n funcional? Todos sabemos lo inmanejables que se vuelven los proyectos de software cuando crecen... y eso no deber√≠a ser as√≠. La programaci√≥n funcional aporta muchas ventajas a la hora de resolver problemas muy actuales, como el crecimiento y mantenimiento del software, o la ejecuci√≥n de c√≥digo as√≠ncrono, en paralelo o de forma concurrente, y nuestro hardware es capaz de compilar en segundos cualquier programa en estilo funcional üèÉ As√≠ que ahora ya sabes por qu√© aprendiste a programar en C, Pascal o Java, no fue por casualidad‚Ä¶ ma√±ana te contar√© m√°s sobre lo que te est√°s perdiendo por no usar programaci√≥n funcional. Y recuerda ¬°el viernes un regalo para t√≠! üéÅ //New end ","srcFilePath":"src/pages/whyfp.soy","id":"whyfp","location":"/whyfp.html","url":"/whyfp.html"},"courses":{"children":{"course_kotlin":{"title":"Kotlin Course","description":"Courses","weight":0,"content":" // Header nav See all courses // Course details Week 1: Introduction ‚úåüèª ON AIR (96:11) As any great story, we need to start from the very begining. In order to warm engines, we'll see what functional programming is and what their basic principles are. And it's free... What are you waiting for? What is Functional Programming? (7:02) Mutable State Sucks (13:37) How to become stateless (16:37) Declarative Style (6:57) Functions without Side Effects (6:55) Lazy Evaluation (9:49) Type Systems (11:13) Recursion (3:37) Higher Order Functions (13:05) Functional Patterns (7:19) // ","srcFilePath":"src/pages/courses/course_kotlin.soy","id":"course_kotlin","location":"/courses/course_kotlin.html","url":"/courses/course_kotlin.html"}},"title":"Courses","description":"Courses","weight":2,"content":" // Header nav //New init Backend courses: Courses description, Courses description, Courses description, Courses description. FUNCTIONAL JavaScript Card title Some quick example text to build on the card title and make up the bulk of the card's content. Go somewhere FUNCTIONAL KOTLIN Card title Some quick example text to build on the card title and make up the bulk of the card's content. Go somewhere //New end //New init Frontend courses: Courses description, Courses description, Courses description, Courses description. FUNCTIONAL KOTLIN Card title Some quick example text to build on the card title and make up the bulk of the card's content. Go somewhere FUNCTIONAL SWIFT Card title Some quick example text to build on the card title and make up the bulk of the card's content. Go somewhere //New end ","srcFilePath":"src/pages/courses/index.soy","id":"courses","location":"/courses/","url":"/courses/","childIds":["course_kotlin"]}},"title":"Home","description":"Description of page","content":" ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","childIds":["whyfp","courses","blog"]}}