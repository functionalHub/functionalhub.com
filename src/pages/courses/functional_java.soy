---
title: "Functional Java"
headTitle: "Functional programming with Java course"
description: "Learn functional programming in Java language for Android"
keywords: "Java, functional programming, learn, course, training, android, java, jvm, java8, stream, optional, recursion, map, flatmap, filter, reduce, monad, monoid, functor, applicative"
weight: 0
---

{namespace pageJavaCourseIndex}

/**
 *
 */
{template .render}
  {call main.sidebar data="all" /}
	{call main.render data="all"}
		{param content kind="html"}
			{call .pageContent data="all" /}
		{/param}
		{param elementClasses: 'Java Course' /}
	{/call}
{/template}

/**
 *
 */
{template .pageContent}
	<div class="container-full-height">
		<div class="container">
			// Header nav
			{call main.header data="all" /}
		</div>

		<div class="container">
			<div class="row">
				<div class="col-md-9 bg-white p-md-5">
                    //
                    <h1 class="display-4 pt-3">Functional Programming</h1>
                    <h1 class="display-4 pt-3">for Java Developers</h1>
                    <h1 class="h1 pt-3">Learn the main concepts of functional programming using Java in a simple and practical way</h1>

                    <div class="py-5">
                        <div class="card bg-light card-body py-4">
                            <h3>Subscribe now and <strong>get 25% off</strong> when the course is ready!</h3>
                            <form action="https://swiftfuncional.us14.list-manage.com/subscribe/post?u=8f33dd73453553d27fb4d0fe8&amp;id=475cdc9870" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate="">
                                <div id="mc_embed_signup_scroll">
                                    <input type="email" value="" name="EMAIL" class="form-control form-control-lg" id="mce-EMAIL" placeholder="Email" required="">
                                    <div class="sr-only" aria-hidden="true"><input type="text" name="b_8f33dd73453553d27fb4d0fe8_475cdc9870" tabindex="-1" value=""></div>
                                </div>
                                <input type="submit" value="Subscribe!" name="subscribe" id="mc-embedded-subscribe" class="btn btn-lg btn-primary btn-block mt-3">
                            </form>
                        </div>
                    </div>                    

                    <div class="text-center">
                    	<br/><br/>
                        <p class="h1">[üåΩ, üêÆ, üêî].stream().map(cook) == [üçø, üçî, üç≥]</p>
                    	<br/>
                    </div>
                    <ul>
                        <li>Are you stuck in filter or map?</li>
                        <li>Are you tired of reading that "A monad is just a monoid in the category of endofunctors"?</li>
                        <li>Do you think that functional programming is too abstract and academic for your taste?</li>
                    </ul>
                    <p>If you answered YES to any of those questions, then this is the couse you're looking for üòâ</p>

                    <h1 class="display-4 mt-4">Course contents</h1>

                    <div class="card bg-light">
                        <div class="card-header" role="tab" id="headingOne">
                            <a class="collapsed card-title h3" role="button" data-toggle="collapse" href="#collapseOne" aria-expanded="false" aria-controls="collapseOne">Week 1: Introduction</a>
                            <span class="onair"> COMING SOON</span>
                        </div>
                        <div id="collapseOne" class="card-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
                          <div class="card-body">
                            As any great story, we need to start from the very begining. In order to warm engines, we'll see what functional programming is and what their basic principles are.<br><br>
                            <ul>
                                <li>What is functional programming?</li>
                                <li>Mutable State Sucks</li>
                                <li>How to become stateless</li>
                                <li>Declarative Style</li>
                                <li>Functions without Side Effects</li>
                                <li>Lazy Evaluation</li>
                                <li>Type Systems</li>
                                <li>Recursion</li>
                                <li>Higher Order Functions</li>
                                <li>Functional Patterns</li>
                            </ul>
                          </div>
                        </div>
                    </div>

                    <div class="card bg-light">
                        <div class="card-header" role="tab" id="headingOne2">
                            <a class="collapsed card-title h3" role="button" data-toggle="collapse" href="#collapseOne2" aria-expanded="false" aria-controls="collapseOne2">Week 2: Recursion</a>
                            <span class="comingsoon"> COMING SOON</span>
                        </div>
                        <div id="collapseOne2" class="card-collapse collapse" role="tabpanel" aria-labelledby="headingOne2">
                          <div class="card-body">
                            In this week, you're already prepared to start going deeper. Since ages, recursion has been considered the ugly guy. Some (very) bad teachers encourage against it, saying that it's even worse than Comic Sans. In this week we're going to see that it's not as bad as some say, but it's one of the most powerful tools in programming in general (and in functional programming in particular). You need to learn some tricks to use it properly, and then you'll be ready to forget your loops forever...<br><br>
                            <ul>
                                <li>Recursion</li>
                                <li>Recursive Functions</li>
                                <li>Tail Recursion and Tail Call Optimization</li>
                            </ul>
                          </div>
                        </div>
                    </div>

                    <div class="card bg-light">
                        <div class="card-header" role="tab" id="headingOne3">
                            <a class="collapsed card-title h3" role="button" data-toggle="collapse" href="#collapseOne3" aria-expanded="false" aria-controls="collapseOne3">Week 3: Functions</a>
                            <span class="comingsoon"> COMING SOON</span>
                        </div>
                        <div id="collapseOne3" class="card-collapse collapse" role="tabpanel" aria-labelledby="headingOne3">
                          <div class="card-body">
                            Functions are the cornerstone of functional programming. You already guessed it... In this week you'll learn new ways to deal with functions, not just to group code together, but to combine and compose several functions to create higher abstractions. You'll get the most from your functions
                            <ul>
                                <li>Functions as First Class Citizens</li>
                                <li>Lambdas</li>
                                <li>Partial Applications and Currying</li>
                                <li>Continuation Passing Style</li>
                                <li>Functions Composition</li>
                                <li>Creating expressions</li>
                                <li>Play combine learn</li>
                            </ul>
                          </div>
                        </div>
                    </div>

                    <div class="card bg-light">
                        <div class="card-header" role="tab" id="headingOne4">
                            <a class="collapsed card-title h3" role="button" data-toggle="collapse" href="#collapseOne4" aria-expanded="false" aria-controls="collapseOne4">Week 4: Functional Transformations</a>
                            <span class="comingsoon"> COMING SOON</span>
                        </div>
                        <div id="collapseOne4" class="card-collapse collapse" role="tabpanel" aria-labelledby="headingOne4">
                          <div class="card-body">
                            We're sure you already use stream's map or reduce functions, but you're not so sure about how to use them properly or how they're implemented internally. Let's master these "functional functions" like nobody before
                            <ul>
                                <li>map</li>
                                <li>filter</li>
                                <li>reduce</li>
                                <li>flatMap</li>
                                <li>forEach, sorted, skip, concat...</li>
                            </ul>
                          </div>
                        </div>
                    </div>

                    <div class="card bg-light">
                        <div class="card-header" role="tab" id="headingOne5">
                            <a class="collapsed card-title h3" role="button" data-toggle="collapse" href="#collapseOne5" aria-expanded="false" aria-controls="collapseOne5">Week 5-10: Functional Patterns</a>
                            <span class="comingsoon"> COMING SOON</span>
                        </div>
                        <div id="collapseOne5" class="card-collapse collapse" role="tabpanel" aria-labelledby="headingOne5">
                          <div class="card-body">
                            <h3>Week 5: Functors</h3>
                            There you go! After some weeks of functional programming exposure, we're ready to dive into the first weird concept. But don't worry, it's not as hard as it looks: you'll learn what a "functor" is and you'll realize that you've been using functors for some time without realizing it!
                            <ul>
                                <li>Functor Option</li>
                                <li>Collection Functor</li>
                                <li>Result Functor</li>
                            </ul>

                            <h3>Week 6: Monoids</h3>
                            It wasn't so hard, was it? Now you're going to learn your second functional pattern: the monoid. For that, we're going to implement a small library for validations following all your brand-new knowledge...
                            <ul>
                                <li>Monoids</li>
                                <li>Use return values</li>
                                <li>Combine AND validate</li>
                                <li>Combine validatORs</li>
                                <li>Semigroup</li>
                                <li>Monoid is not an insult</li>
                            </ul>

                            <h3>Week 7: Monads</h3>
                            Finally! If you at some point have been scared about functional programming, chances are monads are the cause. After this week, you finally don't be scared anymore, and you'll learn how monads work, how to use them, and how to create your own ones! And most important, at the end you'll realize that "monads are just monoids in the category of endofunctors". It's true!
                            <ul>
                                <li>What is a monad?</li>
                                <li>Your Results are monads</li>
                            </ul>

                            <h3>Week 8: Applicatives</h3>
                            Now that you know what a monad is, let's go for other powerful functional pattern: the applicative.
                            <ul>
                                <li>What is an Applicative?</li>
                                <li>Applicative for Validation</li>
                                <li>This is just a mess!</li>
                            </ul>

                            <h3>Weeks 9 & 10: Mixing everything together</h3>
                            After these 8 weeks, you've learnt a lot of new (and old) concepts. Some of them are so powerful that you'll need weeks (or even months) of practice to be proficient enough. So, in order to accelerate your learning, now we're going to use all those concepts together, in a new library to deal with asynchronous code: we're going to create the Future.
                            <ul>
                                <li>Won't somebody please think of the asychronous code?</li>
                                <li>Functor-ize the Future</li>
                                <li>Monad-ize the Future</li>
                                <li>Applicat-ize the Future</li>
                                <li>Won't somebody please think of the sychronous code?</li>
                                <li>Validations</li>
                                <li>Operators of the Future</li>
                                <li>Final Touches</li>
                            </ul>
                          </div>
                        </div>
                    </div>
                    
                    <div class="py-5">
                        <div class="card bg-light card-body py-4">
                            <h3>Subscribe now and <strong>get 25% off</strong> when the course is ready!</h3>
                            <form action="https://swiftfuncional.us14.list-manage.com/subscribe/post?u=8f33dd73453553d27fb4d0fe8&amp;id=475cdc9870" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate="">
                                <div id="mc_embed_signup_scroll">
                                    <input type="email" value="" name="EMAIL" class="form-control form-control-lg" id="mce-EMAIL" placeholder="Email" required="">
                                    <div class="sr-only" aria-hidden="true"><input type="text" name="b_8f33dd73453553d27fb4d0fe8_475cdc9870" tabindex="-1" value=""></div>
                                </div>
                                <input type="submit" value="Subscribe!" name="subscribe" id="mc-embedded-subscribe" class="btn btn-lg btn-primary btn-block mt-3">
                            </form>
                        </div>
                    </div>                    

                    <p>And if you still has some questions, maybe this can be helpful:</p>
                    <div>
                        <h2>Why should I learn functional programming?</h2>
                        <p>Well, let&#39;s say it will give you more tools to be a better programmer, no matter what programming language you use.
                        <br>Maybe you can&#39;t use FP in your daily basis (yeah, your boss is a dinosaur), but we&#39;re sure that if you learn these concepts, your programming style will improve A LOT.</p>

                        <h2>And why should I use Java to learn functional programming?</h2>
                        <p>It's true that Java is a verbose language and probably Kotlin or Scala are better options to learn functional programming. However, if you can't get rid of Java, using it will be much more pragmatic: you'll be able to use in your Java projects everything you learn in this course</p>

                        <h2>But, are you sure this is really useful?</h2>
                        <p>Sure thing! Some benefits of programming with functional style:</p>

                        <ul>
                            <li>It will allow you to make some tasks that would be must harder using your traditional style. Notice that <a href="https://es.wikipedia.org/wiki/MapReduce" rel="noopener noreferrer" target="_blank">Google</a> used some functional core concepts from the very begining.</li>
                            <li>Your code will be cleaner, with (much) less variables, and you wouldn&#39;t worry by &quot;what if this is null&quot;</li>
                            <li>Your code will be more robust, will much less errors. The compiler will detect much more errors for you following the functional style. Also, your coding style will allow you to detect errors faster and easier.</li>
                            <li>Your code will be more maintainable and adaptable. As <a href="https://www.johndcook.com/blog/2011/07/19/you-wanted-banana/">Joe Armstrong</a> said, the inventor of Erlang, with OOP <em>you wanted a banana but what you got was a gorilla holding the banana and the entire jungle.</em></li>
                        </ul>

                        <h2>Is it going to be difficult?</h2>
                        <p>It&#39;s not difficult, it&#39;s quite simple. But it&#39;s different to the OOP style, that you&#39;re probably used to. Rich Hickey, the inventor of Clojure, explained in his famous talk <a href="https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/SimpleMadeEasy.md">&quot;Simple made Easy&quot;</a> the difference between &quot;easy&quot; (something you&#39;re use to, even though it&#39;s a mess) and &quot;simple&quot; (something that can be explained and understood quickly, without effort, even though it may be quite new for you).</p>
                        <p><strong>Functional programming is simple</strong>, but even you&#39;re an experienced developers, you&#39;ll have to learn scratch. But we&#39;re sure that this isn&#39;t anything for PhD&#39;s, as you probably believed. But you&#39;ll have to invest enough effort: no pain, no gain, my friend...</p>

                        <h2>How are you going to teach it?</h2>
                        <p>Using short video lessons, less than 20 minutes, where you&#39;ll find explanations about specific concepts and techniques. They&#39;re usually simple concepts, but with a lot of uses and potential applications. Don&#39;t worry if you don&#39;t get it at first. That&#39;s normal, and you&#39;ll probably have to listen some videos more than once, in order to understand all the details.
                        <br>Each video includes several practical and everyday examples. We won&#39;t talk about fibonacci, factorials and other mathematical examples. We&#39;ll use daily situations and challenges, but solved differently. And if next you want to jump into pure functional languages, it will be much easier for you.</p>

                        <h2>I don&#39;t know Java, but I know how to code in X</h2>
                        <p>Awesome! Java is just the vehicle, but the important thing is the payload. Our code is quite easy to read and we use the simplest features of the language. It&#39;s in fact a good way to be introduced in a new language from a different side: instead of focusing on the syntax, focusing on the style.</p>

                        <h2>Is there any other requirement?</h2>
                        <p>Not really: you need to know how to code in any language (better if it&#39;s an OOP language), and you need to be interested in learning functional programming.</p>
                        <p>And it&#39;s even better if you already tried to learn FP without success. After this couse, you&#39;ll realize it wasn&#39;t that difficult</p>
                    </div>
                    
                    <div class="py-5">
                        <div class="card bg-light card-body py-4">
                            <h3>Subscribe now and <strong>get 25% off</strong> when the course is ready!</h3>
                            <form action="https://swiftfuncional.us14.list-manage.com/subscribe/post?u=8f33dd73453553d27fb4d0fe8&amp;id=475cdc9870" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate="">
                                <div id="mc_embed_signup_scroll">
                                    <input type="email" value="" name="EMAIL" class="form-control form-control-lg" id="mce-EMAIL" placeholder="Email" required="">
                                    <div class="sr-only" aria-hidden="true"><input type="text" name="b_8f33dd73453553d27fb4d0fe8_475cdc9870" tabindex="-1" value=""></div>
                                </div>
                                <input type="submit" value="Subscribe!" name="subscribe" id="mc-embedded-subscribe" class="btn btn-lg btn-primary btn-block mt-3">
                            </form>
                        </div>
                    </div>                    
                </div>

				<div class="col-md-3 text-white pb-3">
					<div class="px-3">
						<img class="img-fluid rounded-circle py-4" src="/images/logos/java-logo.png" width="350" height="350" />
						<p>
							We're working on the course, so subscribe now and you'll <strong>get 25% off</strong> as soon as it's ready!
						</p>
						<div class="py-4">
                            <form action="https://swiftfuncional.us14.list-manage.com/subscribe/post?u=8f33dd73453553d27fb4d0fe8&amp;id=475cdc9870" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate="">
                                <div id="mc_embed_signup_scroll">
                                    <input type="email" value="" name="EMAIL" class="form-control" id="mce-EMAIL" placeholder="Email" required="">
                                    <div class="sr-only" aria-hidden="true"><input type="text" name="b_8f33dd73453553d27fb4d0fe8_475cdc9870" tabindex="-1" value=""></div>
                                </div>
                                <input type="submit" value="Subscribe!" name="subscribe" id="mc-embedded-subscribe" class="btn btn-lg btn-primary btn-block">
                            </form>
						</div>
					</div>
				</div>

			</div>
		</div>
	</div>
{/template}